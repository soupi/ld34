(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  //- ModuloSemiring -------------------------------------------------------------

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  }; 
  var moduloSemiringInt = new ModuloSemiring(function () {
      return semiringInt;
  }, $foreign.intDiv, $foreign.intMod);
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eqChar = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (__dict_Eq_7) {
      return eq(__dict_Eq_7);
  }; 
  var div = function (dict) {
      return dict.div;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $bar$bar = function (__dict_BooleanAlgebra_11) {
      return disj(__dict_BooleanAlgebra_11);
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (__dict_Eq_9) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(__dict_Eq_9)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (__dict_Bind_24) {
      return bind(__dict_Bind_24);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Eq"] = Eq;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["||"] = $bar$bar;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["semiringInt"] = semiringInt;
  exports["moduloSemiringInt"] = moduloSemiringInt;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return Prelude[">>>"](Prelude.semigroupoidFn)(a2b)(Prelude[">>>"](Prelude.semigroupoidFn)(b2c)(c2d));
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;;
 
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (b) {
      return function (f) {
          return function (_0) {
              if (_0 instanceof Nothing) {
                  return b;
              };
              if (_0 instanceof Just) {
                  return f(_0.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, _0.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (_2) {
          if (_2 instanceof Just) {
              return new Just(fn(_2.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Prelude.id(Prelude.categoryFn));
  };
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (_3) {
      return function (x) {
          if (_3 instanceof Just) {
              return Prelude["<$>"](functorMaybe)(_3.value0)(x);
          };
          if (_3 instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 121, column 1 - line 145, column 1: " + [ _3.constructor.name, x.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (_5) {
      return function (k) {
          if (_5 instanceof Just) {
              return k(_5.value0);
          };
          if (_5 instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 180, column 1 - line 199, column 1: " + [ _5.constructor.name, k.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (__dict_Traversable_12) {
      return function (__dict_Applicative_13) {
          return function (tma) {
              return traverse(__dict_Traversable_12)(__dict_Applicative_13)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (__dict_Applicative_15) {
      return sequenceDefault(traversableArray)(__dict_Applicative_15);
  }, function (__dict_Applicative_14) {
      return $foreign.traverseArrayImpl(Prelude.apply(__dict_Applicative_14["__superclass_Prelude.Apply_0"]()))(Prelude.map((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(__dict_Applicative_14));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var functorTuple = new Prelude.Functor(function (f) {
      return function (_31) {
          return new Tuple(_31.value0, f(_31.value1));
      };
  });
  exports["Tuple"] = Tuple;
  exports["functorTuple"] = functorTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (_0) {
          return new Data_Tuple.Tuple(a2b(_0.value0), _0.value1);
      };
  }, Prelude["<$>"](Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["second"] = second;
  exports["first"] = first;
  exports["strongFn"] = strongFn;;
 
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var lens$prime = function (to) {
      return function (__dict_Strong_0) {
          return function (pab) {
              return Data_Profunctor.dimap(__dict_Strong_0["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (_0) {
                  return _0.value1(_0.value0);
              })(Data_Profunctor_Strong.first(__dict_Strong_0)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (__dict_Strong_1) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(__dict_Strong_1);
          };
      };
  };
  exports["lens"] = lens;;
 
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (_0) {
      if (_0 instanceof Data_Maybe.Just) {
          return _0.value0;
      };
      if (_0 instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ _0.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  exports["zipWith"] = $foreign.zipWith;
  exports["filter"] = $foreign.filter;
  exports["length"] = $foreign.length;
  exports["range"] = $foreign.range;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.withImage = function (src) {
    return function(f) {
          return function () {
              var img = new Image();
              img.src = src;
              img.addEventListener("load", function() {
                  f(img)();
              }, false);

              return {};
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["drawImage"] = $foreign.drawImage;
  exports["withImage"] = $foreign.withImage;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["fillRect"] = $foreign.fillRect;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      return cb(function(e) {
        return function() {
          error(e);
        };
      })(function(v) {
        return function() {
          try {
            success(v);
          } catch (e) {
            error(e);
          }
        };
      })();
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (e) {
          error(e);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (e) {
                  f(e);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._attempt = function (Left, Right, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(Right(v));
        } catch (e) {
          error(e);
        }
      }, function(e) {
        try {
          success(Left(e));
        } catch (e) {
          error(e);
        }
      });
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (e) {
          errorT(e)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Prelude.Functor(function (f) {
      return function (_2) {
          if (_2 instanceof Left) {
              return new Left(_2.value0);
          };
          if (_2 instanceof Right) {
              return new Right(f(_2.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 52, column 1 - line 56, column 1: " + [ f.constructor.name, _2.constructor.name ]);
      };
  });
  var either = function (f) {
      return function (g) {
          return function (_1) {
              if (_1 instanceof Left) {
                  return f(_1.value0);
              };
              if (_1 instanceof Right) {
                  return g(_1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 28, column 1 - line 29, column 1: " + [ f.constructor.name, g.constructor.name, _1.constructor.name ]);
          };
      };
  };
  var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
  var applyEither = new Prelude.Apply(function () {
      return functorEither;
  }, function (_4) {
      return function (r) {
          if (_4 instanceof Left) {
              return new Left(_4.value0);
          };
          if (_4 instanceof Right) {
              return Prelude["<$>"](functorEither)(_4.value0)(r);
          };
          throw new Error("Failed pattern match at Data.Either line 92, column 1 - line 116, column 1: " + [ _4.constructor.name, r.constructor.name ]);
      };
  });
  var bindEither = new Prelude.Bind(function () {
      return applyEither;
  }, either(function (e) {
      return function (_0) {
          return new Left(e);
      };
  })(function (a) {
      return function (f) {
          return f(a);
      };
  }));
  var applicativeEither = new Prelude.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["isLeft"] = isLeft;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
  exports["bindEither"] = bindEither;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var launchAff = function (_17) {
      return runAff(Control_Monad_Eff_Exception.throwException)(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))($foreign._unsafeInterleaveAff(_17));
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var liftEff$prime = function (eff) {
      return attempt($foreign._unsafeInterleaveAff($foreign._liftEff(nonCanceler, eff)));
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                       
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["makeAff"] = makeAff;
  exports["liftEff'"] = liftEff$prime;
  exports["launchAff"] = launchAff;
  exports["attempt"] = attempt;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;;
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];     
  var y = Data_Lens_Lens.lens(function (_3) {
      return _3.y;
  })(function (_4) {
      return function (_5) {
          var _6 = {};
          for (var _7 in _4) {
              if (_4.hasOwnProperty(_7)) {
                  _6[_7] = _4[_7];
              };
          };
          _6.y = _5;
          return _6;
      };
  });
  var x = Data_Lens_Lens.lens(function (_0) {
      return _0.x;
  })(function (_1) {
      return function (_2) {
          var _8 = {};
          for (var _9 in _1) {
              if (_1.hasOwnProperty(_9)) {
                  _8[_9] = _1[_9];
              };
          };
          _8.x = _2;
          return _8;
      };
  });
  var width = 1024.0;
  var pointInRect = function (p) {
      return function (obj) {
          return obj.pos.x <= p.x && p.x <= obj.pos.x + obj.size.x && (obj.pos.y <= p.y && p.y <= obj.pos.y + obj.size.y);
      };
  };
  var loadImageData = function (src) {
      return Control_Monad_Aff.makeAff(function (error) {
          return function (success) {
              return Graphics_Canvas.withImage(src)(success);
          };
      });
  };
  var height = 800.0;
  exports["y"] = y;
  exports["x"] = x;
  exports["pointInRect"] = pointInRect;
  exports["loadImageData"] = loadImageData;
  exports["height"] = height;
  exports["width"] = width;;
 
})(PS["CanvasUtils"] = PS["CanvasUtils"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var $eq$less$less = function (__dict_Bind_1) {
      return function (f) {
          return function (m) {
              return Prelude[">>="](__dict_Bind_1)(m)(f);
          };
      };
  };
  exports["=<<"] = $eq$less$less;;
 
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Lens_Types = PS["Data.Lens.Types"];     
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Prelude["const"](b));
      };
  };
  exports["set"] = set;
  exports["over"] = over;;
 
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var uncons = function (_17) {
      if (_17 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (_17 instanceof Cons) {
          return new Data_Maybe.Just({
              head: _17.value0, 
              tail: _17.value1
          });
      };
      throw new Error("Failed pattern match at Data.List line 267, column 1 - line 268, column 1: " + [ _17.constructor.name ]);
  };
  var toList = function (__dict_Foldable_2) {
      return Data_Foldable.foldr(__dict_Foldable_2)(Cons.create)(Nil.value);
  };
  var tail = function (_15) {
      if (_15 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (_15 instanceof Cons) {
          return new Data_Maybe.Just(_15.value1);
      };
      throw new Error("Failed pattern match at Data.List line 248, column 1 - line 249, column 1: " + [ _15.constructor.name ]);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  };
  var showList = function (__dict_Show_4) {
      return new Prelude.Show(function (_57) {
          if (_57 instanceof Nil) {
              return "Nil";
          };
          if (_57 instanceof Cons) {
              return "Cons (" + (Prelude.show(__dict_Show_4)(_57.value0) + (") (" + (Prelude.show(showList(__dict_Show_4))(_57.value1) + ")")));
          };
          throw new Error("Failed pattern match: " + [ _57.constructor.name ]);
      });
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy__41) {
              var acc = __copy_acc;
              var _41 = __copy__41;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_41 instanceof Nil) {
                      return acc_1;
                  };
                  if (_41 instanceof Cons) {
                      var __tco_acc = new Cons(_41.value0, acc);
                      var __tco__41 = _41.value1;
                      acc = __tco_acc;
                      _41 = __tco__41;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 365, column 1 - line 366, column 1: " + [ acc.constructor.name, _41.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy__55) {
                  return function (__copy__56) {
                      return function (__copy_acc) {
                          var _55 = __copy__55;
                          var _56 = __copy__56;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (_55 instanceof Nil) {
                                  return acc;
                              };
                              if (_56 instanceof Nil) {
                                  return acc;
                              };
                              if (_55 instanceof Cons && _56 instanceof Cons) {
                                  var __tco__55 = _55.value1;
                                  var __tco__56 = _56.value1;
                                  var __tco_acc = new Cons(f(_55.value0)(_56.value0), acc);
                                  _55 = __tco__55;
                                  _56 = __tco__56;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 651, column 1 - line 652, column 1: " + [ _55.constructor.name, _56.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var _163 = start > end;
                  if (_163) {
                      return 1;
                  };
                  if (!_163) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ _163.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };                   
  var $$null = function (_11) {
      if (_11 instanceof Nil) {
          return true;
      };
      return false;
  };                     
  var head = function (_13) {
      if (_13 instanceof Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (_13 instanceof Cons) {
          return new Data_Maybe.Just(_13.value0);
      };
      throw new Error("Failed pattern match at Data.List line 233, column 1 - line 234, column 1: " + [ _13.constructor.name ]);
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy__64) {
              return function (__copy_acc) {
                  var _64 = __copy__64;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (_64 instanceof Nil) {
                          return acc;
                      };
                      if (_64 instanceof Cons) {
                          var __tco__64 = _64.value1;
                          var __tco_acc = new Cons(f(_64.value0), acc);
                          _64 = __tco__64;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 718, column 1 - line 725, column 1: " + [ _64.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function (_319) {
                  return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_319));
              };
          })(Data_Monoid.mempty(__dict_Monoid_16));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__66) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _66 = __copy__66;
                  tco: while (true) {
                      var b_1 = b;
                      if (_66 instanceof Nil) {
                          return b_1;
                      };
                      if (_66 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_66.value0);
                          var __tco__66 = _66.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _66 = __tco__66;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_65) {
              if (_65 instanceof Nil) {
                  return b;
              };
              if (_65 instanceof Cons) {
                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
          };
      };
  });
  var length = Data_Foldable.foldl(foldableList)(function (acc) {
      return function (_8) {
          return acc + 1 | 0;
      };
  })(0);
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (__dict_Applicative_1) {
      return function (_69) {
          if (_69 instanceof Nil) {
              return Prelude.pure(__dict_Applicative_1)(Nil.value);
          };
          if (_69 instanceof Cons) {
              return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_69.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_69.value1));
          };
          throw new Error("Failed pattern match: " + [ _69.constructor.name ]);
      };
  }, function (__dict_Applicative_0) {
      return function (f) {
          return function (_68) {
              if (_68 instanceof Nil) {
                  return Prelude.pure(__dict_Applicative_0)(Nil.value);
              };
              if (_68 instanceof Cons) {
                  return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_68.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(f)(_68.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, _68.constructor.name ]);
          };
      };
  });
  var eqList = function (__dict_Eq_21) {
      return new Prelude.Eq(function (xs) {
          return function (ys) {
              var go = function (__copy__58) {
                  return function (__copy__59) {
                      return function (__copy__60) {
                          var _58 = __copy__58;
                          var _59 = __copy__59;
                          var _60 = __copy__60;
                          tco: while (true) {
                              if (!_60) {
                                  return false;
                              };
                              if (_58 instanceof Nil && _59 instanceof Nil) {
                                  return _60;
                              };
                              if (_58 instanceof Cons && _59 instanceof Cons) {
                                  var __tco__58 = _58.value1;
                                  var __tco__59 = _59.value1;
                                  var __tco__60 = _60 && Prelude["=="](__dict_Eq_21)(_59.value0)(_58.value0);
                                  _58 = __tco__58;
                                  _59 = __tco__59;
                                  _60 = __tco__60;
                                  continue tco;
                              };
                              return false;
                          };
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      });
  };
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["zipWith"] = zipWith;
  exports["reverse"] = reverse;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports["length"] = length;
  exports["null"] = $$null;
  exports["range"] = range;
  exports["singleton"] = singleton;
  exports["toList"] = toList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.String

  exports._charAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (s) {
          return i >= 0 && i < s.length ? just(s.charAt(i)) : nothing;
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;;
 
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];     
  var uncons = function (_0) {
      if (_0 === "") {
          return Data_Maybe.Nothing.value;
      };
      return new Data_Maybe.Just({
          head: Data_String_Unsafe.charAt(0)(_0), 
          tail: $foreign.drop(1)(_0)
      });
  };                                                                                      
  var charAt = $foreign._charAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["uncons"] = uncons;
  exports["charAt"] = charAt;
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
  exports["length"] = $foreign.length;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];               
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];                   
  var second = 1000.0;
  var millisecond = 1.0;
  var every = $foreign.everyP(Signal.constant);
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["every"] = every;
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];     
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["windowDimensions"] = windowDimensions;
  exports["mousePos"] = mousePos;
  exports["mouseButton"] = mouseButton;
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (_1) {
      return _1.value1;
  };
  var fst = function (_0) {
      return _0.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;;
 
})(PS["Utils"] = PS["Utils"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Apply = PS["Control.Apply"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var Signal_DOM = PS["Signal.DOM"];
  var CanvasUtils = PS["CanvasUtils"];
  var Utils = PS["Utils"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];     
  var zeroOne = Data_Lens_Lens.lens(function (_0) {
      return _0.zeroOne;
  })(function (_1) {
      return function (_2) {
          var _32 = {};
          for (var _33 in _1) {
              if (_1.hasOwnProperty(_33)) {
                  _32[_33] = _1[_33];
              };
          };
          _32.zeroOne = _2;
          return _32;
      };
  });
  var zero$prime = function __do() {
      var _27 = Signal_DOM.keyPressed(48)();
      var _26 = Signal_DOM.keyPressed(96)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["||"](Prelude.booleanAlgebraBoolean))(_27))(_26);
  };
  var zero = Data_Lens_Lens.lens(function (_3) {
      return _3.zero;
  })(function (_4) {
      return function (_5) {
          var _36 = {};
          for (var _37 in _4) {
              if (_4.hasOwnProperty(_37)) {
                  _36[_37] = _4[_37];
              };
          };
          _36.zero = _5;
          return _36;
      };
  });
  var upKeyCode = 38;
  var tKeyCode = 84;
  var tKey = Signal_DOM.keyPressed(tKeyCode);
  var rightKeyCode = 39;
  var one$prime = function __do() {
      var _29 = Signal_DOM.keyPressed(49)();
      var _28 = Signal_DOM.keyPressed(97)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["||"](Prelude.booleanAlgebraBoolean))(_29))(_28);
  };
  var one = Data_Lens_Lens.lens(function (_6) {
      return _6.one;
  })(function (_7) {
      return function (_8) {
          var _40 = {};
          for (var _41 in _7) {
              if (_7.hasOwnProperty(_41)) {
                  _40[_41] = _7[_41];
              };
          };
          _40.one = _8;
          return _40;
      };
  });
  var oKeyCode = 79;
  var mouseClick = function __do() {
      var _31 = Signal_DOM.mousePos();
      var _30 = Signal_DOM.mouseButton(0)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (p) {
          return function (d) {
              if (d) {
                  return new Data_Maybe.Just({
                      x: Data_Int.toNumber(p.x), 
                      y: Data_Int.toNumber(p.y)
                  });
              };
              if (!d) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Input line 120, column 1 - line 128, column 1: " + [ d.constructor.name ]);
          };
      })(_31))(_30);
  };
  var leftKeyCode = 37;
  var iKeyCode = 73;
  var io = function __do() {
      var _23 = Signal_DOM.keyPressed(iKeyCode)();
      var _22 = Signal_DOM.keyPressed(oKeyCode)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Utils.Tuple.create)(_23))(_22);
  };
  var escKeyCode = 27;
  var enterKeyCode = 13;
  var downKeyCode = 40;
  var buildInput = function (t) {
      return function (a) {
          return function (sdir) {
              return function (z) {
                  return function (o) {
                      return function (m) {
                          return function (winDim) {
                              return function (io_1) {
                                  return function (rt) {
                                      return {
                                          arrows: a, 
                                          time: t, 
                                          screenDir: sdir, 
                                          zeroOne: {
                                              zero: z, 
                                              one: o
                                          }, 
                                          io: io_1, 
                                          runTests: rt, 
                                          mouseClick: Prelude.map(Data_Maybe.functorMaybe)(function (p) {
                                              return {
                                                  x: p.x - (Data_Int.toNumber(winDim.w) - CanvasUtils.width) / 2.0, 
                                                  y: p.y - 5.0
                                              };
                                          })(m)
                                      };
                                  };
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var asNum = function (b) {
      if (b) {
          return 1.0;
      };
      if (!b) {
          return 0.0;
      };
      throw new Error("Failed pattern match at Input line 101, column 1 - line 103, column 1: " + [ b.constructor.name ]);
  };
  var screenDirection = function __do() {
      var _25 = Signal_DOM.keyPressed(enterKeyCode)();
      var _24 = Signal_DOM.keyPressed(escKeyCode)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (f) {
          return function (b) {
              return asNum(f) - asNum(b);
          };
      })(_25))(_24);
  };
  var arrows = function __do() {
      var _21 = Signal_DOM.keyPressed(leftKeyCode)();
      var _20 = Signal_DOM.keyPressed(rightKeyCode)();
      var _19 = Signal_DOM.keyPressed(upKeyCode)();
      var _18 = Signal_DOM.keyPressed(downKeyCode)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (l) {
          return function (r) {
              return function (u) {
                  return function (d) {
                      return {
                          x: asNum(r) - asNum(l), 
                          y: asNum(d) - asNum(u)
                      };
                  };
              };
          };
      })(_21))(_20))(_19))(_18);
  };
  var input = function __do() {
      var _17 = Signal_DOM.animationFrame();
      return (function () {
          var time = Signal_Time.every(Signal_Time.millisecond * 17.0);
          return function __do() {
              var _16 = arrows();
              var _15 = screenDirection();
              var _14 = zero$prime();
              var _13 = one$prime();
              var _12 = mouseClick();
              var _11 = Signal_DOM.windowDimensions();
              var _10 = io();
              var _9 = tKey();
              return Signal.sampleOn(_17)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(buildInput)(time))(_16))(_15))(_14))(_13))(_12))(_11))(_10))(_9));
          };
      })()();
  };
  exports["one"] = one;
  exports["zero"] = zero;
  exports["zeroOne"] = zeroOne;
  exports["mouseClick"] = mouseClick;
  exports["asNum"] = asNum;
  exports["screenDirection"] = screenDirection;
  exports["io"] = io;
  exports["tKey"] = tKey;
  exports["tKeyCode"] = tKeyCode;
  exports["oKeyCode"] = oKeyCode;
  exports["iKeyCode"] = iKeyCode;
  exports["escKeyCode"] = escKeyCode;
  exports["enterKeyCode"] = enterKeyCode;
  exports["downKeyCode"] = downKeyCode;
  exports["upKeyCode"] = upKeyCode;
  exports["rightKeyCode"] = rightKeyCode;
  exports["leftKeyCode"] = leftKeyCode;
  exports["arrows"] = arrows;
  exports["buildInput"] = buildInput;
  exports["input"] = input;;
 
})(PS["Input"] = PS["Input"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Utils = PS["Utils"];     
  var Zipper = (function () {
      function Zipper(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Zipper.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Zipper(value0, value1, value2);
              };
          };
      };
      return Zipper;
  })();
  var zipper = Zipper.create;
  var next = function (_1) {
      if (_1.value2 instanceof Data_List.Nil) {
          return new Utils.Tuple(false, _1);
      };
      if (_1.value2 instanceof Data_List.Cons) {
          return Utils.Tuple.create(true)(new Zipper(_1.value2.value0, new Data_List.Cons(_1.value0, _1.value1), _1.value2.value1));
      };
      throw new Error("Failed pattern match at Zipper line 17, column 1 - line 18, column 1: " + [ _1.value2.constructor.name ]);
  };
  var current = function (_0) {
      return _0.value0;
  };
  var back = function (_2) {
      if (_2.value1 instanceof Data_List.Nil) {
          return new Utils.Tuple(false, _2);
      };
      if (_2.value1 instanceof Data_List.Cons) {
          return Utils.Tuple.create(true)(new Zipper(_2.value1.value0, _2.value1.value1, new Data_List.Cons(_2.value0, _2.value2)));
      };
      throw new Error("Failed pattern match at Zipper line 25, column 1 - line 26, column 1: " + [ _2.value1.constructor.name ]);
  };
  var start = function (__copy__3) {
      var _3 = __copy__3;
      tco: while (true) {
          var zipp = _3;
          if (_3.value1 instanceof Data_List.Nil) {
              return zipp;
          };
          var __tco__3 = Utils.snd(back(_3));
          _3 = __tco__3;
          continue tco;
      };
  };
  exports["Zipper"] = Zipper;
  exports["start"] = start;
  exports["back"] = back;
  exports["next"] = next;
  exports["current"] = current;
  exports["zipper"] = zipper;;
 
})(PS["Zipper"] = PS["Zipper"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Either = PS["Data.Either"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Data_Lens = PS["Data.Lens"];
  var Control_Bind = PS["Control.Bind"];
  var Utils = PS["Utils"];
  var Zipper = PS["Zipper"];
  var Debug_Trace = PS["Debug.Trace"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];     
  var HALT = (function () {
      function HALT() {

      };
      HALT.value = new HALT();
      return HALT;
  })();
  var PRINT = (function () {
      function PRINT() {

      };
      PRINT.value = new PRINT();
      return PRINT;
  })();
  var LOADVAL = (function () {
      function LOADVAL(value0) {
          this.value0 = value0;
      };
      LOADVAL.create = function (value0) {
          return new LOADVAL(value0);
      };
      return LOADVAL;
  })();
  var LOADIN = (function () {
      function LOADIN() {

      };
      LOADIN.value = new LOADIN();
      return LOADIN;
  })();
  var POP = (function () {
      function POP() {

      };
      POP.value = new POP();
      return POP;
  })();
  var JUMP = (function () {
      function JUMP() {

      };
      JUMP.value = new JUMP();
      return JUMP;
  })();
  var JUMPIF = (function () {
      function JUMPIF() {

      };
      JUMPIF.value = new JUMPIF();
      return JUMPIF;
  })();
  var COMPARE = (function () {
      function COMPARE() {

      };
      COMPARE.value = new COMPARE();
      return COMPARE;
  })();
  var ADD = (function () {
      function ADD() {

      };
      ADD.value = new ADD();
      return ADD;
  })();
  var EMPTY = (function () {
      function EMPTY() {

      };
      EMPTY.value = new EMPTY();
      return EMPTY;
  })();
  var DUP = (function () {
      function DUP() {

      };
      DUP.value = new DUP();
      return DUP;
  })();
  var StackUnderflow = (function () {
      function StackUnderflow() {

      };
      StackUnderflow.value = new StackUnderflow();
      return StackUnderflow;
  })();
  var UnknownInstruction = (function () {
      function UnknownInstruction() {

      };
      UnknownInstruction.value = new UnknownInstruction();
      return UnknownInstruction;
  })();
  var InputError = (function () {
      function InputError() {

      };
      InputError.value = new InputError();
      return InputError;
  })();
  var throwErr = Data_Either.Left.create;
  var takeTwo = function (_26) {
      if (_26 instanceof Data_List.Cons && _26.value1 instanceof Data_List.Cons) {
          return Data_Maybe.Just.create(new Utils.Tuple(_26.value0, _26.value1.value0));
      };
      return Data_Maybe.Nothing.value;
  };
  var strBinToInt = function (str) {
      return Data_Maybe.fromMaybe(new Data_Either.Left(UnknownInstruction.value))(Prelude.map(Data_Maybe.functorMaybe)(Data_Either.Right.create)(Prelude.bind(Data_Maybe.bindMaybe)(Data_String.uncons(str))(function (_22) {
          return Prelude.bind(Data_Maybe.bindMaybe)(Data_String.uncons(_22.tail))(function (_21) {
              return Prelude.bind(Data_Maybe.bindMaybe)(Data_String.uncons(_21.tail))(function (_20) {
                  return Prelude.bind(Data_Maybe.bindMaybe)(Data_String.uncons(_20.tail))(function (_19) {
                      return Prelude.bind(Data_Maybe.bindMaybe)(Data_String.uncons(_19.tail))(function (_18) {
                          return Prelude.bind(Data_Maybe.bindMaybe)((function () {
                              var _38 = Prelude["=="](Prelude.eqChar)(_22.head)("0");
                              if (_38) {
                                  return new Data_Maybe.Just(1);
                              };
                              if (!_38) {
                                  var _39 = Prelude["=="](Prelude.eqChar)(_22.head)("1");
                                  if (_39) {
                                      return new Data_Maybe.Just(-1);
                                  };
                                  if (!_39) {
                                      return Data_Maybe.Nothing.value;
                                  };
                                  throw new Error("Failed pattern match: " + [ _39.constructor.name ]);
                              };
                              throw new Error("Failed pattern match at Machine line 201, column 1 - line 202, column 1: " + [ _38.constructor.name ]);
                          })())(function (_17) {
                              return Prelude.bind(Data_Maybe.bindMaybe)((function () {
                                  var _41 = Prelude["=="](Prelude.eqChar)(_21.head)("0");
                                  if (_41) {
                                      return new Data_Maybe.Just(0);
                                  };
                                  if (!_41) {
                                      var _42 = Prelude["=="](Prelude.eqChar)(_21.head)("1");
                                      if (_42) {
                                          return new Data_Maybe.Just(1);
                                      };
                                      if (!_42) {
                                          return Data_Maybe.Nothing.value;
                                      };
                                      throw new Error("Failed pattern match: " + [ _42.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match at Machine line 201, column 1 - line 202, column 1: " + [ _41.constructor.name ]);
                              })())(function (_16) {
                                  return Prelude.bind(Data_Maybe.bindMaybe)((function () {
                                      var _44 = Prelude["=="](Prelude.eqChar)(_20.head)("0");
                                      if (_44) {
                                          return new Data_Maybe.Just(0);
                                      };
                                      if (!_44) {
                                          var _45 = Prelude["=="](Prelude.eqChar)(_20.head)("1");
                                          if (_45) {
                                              return new Data_Maybe.Just(1);
                                          };
                                          if (!_45) {
                                              return Data_Maybe.Nothing.value;
                                          };
                                          throw new Error("Failed pattern match: " + [ _45.constructor.name ]);
                                      };
                                      throw new Error("Failed pattern match at Machine line 201, column 1 - line 202, column 1: " + [ _44.constructor.name ]);
                                  })())(function (_15) {
                                      return Prelude.bind(Data_Maybe.bindMaybe)((function () {
                                          var _47 = Prelude["=="](Prelude.eqChar)(_19.head)("0");
                                          if (_47) {
                                              return new Data_Maybe.Just(0);
                                          };
                                          if (!_47) {
                                              var _48 = Prelude["=="](Prelude.eqChar)(_19.head)("1");
                                              if (_48) {
                                                  return new Data_Maybe.Just(1);
                                              };
                                              if (!_48) {
                                                  return Data_Maybe.Nothing.value;
                                              };
                                              throw new Error("Failed pattern match: " + [ _48.constructor.name ]);
                                          };
                                          throw new Error("Failed pattern match at Machine line 201, column 1 - line 202, column 1: " + [ _47.constructor.name ]);
                                      })())(function (_14) {
                                          return Prelude.bind(Data_Maybe.bindMaybe)((function () {
                                              var _50 = Prelude["=="](Prelude.eqChar)(_18.head)("0");
                                              if (_50) {
                                                  return new Data_Maybe.Just(0);
                                              };
                                              if (!_50) {
                                                  var _51 = Prelude["=="](Prelude.eqChar)(_18.head)("1");
                                                  if (_51) {
                                                      return new Data_Maybe.Just(1);
                                                  };
                                                  if (!_51) {
                                                      return Data_Maybe.Nothing.value;
                                                  };
                                                  throw new Error("Failed pattern match: " + [ _51.constructor.name ]);
                                              };
                                              throw new Error("Failed pattern match at Machine line 201, column 1 - line 202, column 1: " + [ _50.constructor.name ]);
                                          })())(function (_13) {
                                              return Prelude.pure(Data_Maybe.applicativeMaybe)(((((_13 * 1 | 0) + (_14 * 2 | 0) | 0) + (_15 * 4 | 0) | 0) + (_16 * 8 | 0) | 0) * _17 | 0);
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      })));
  };
  var translate = function (txt) {
      var _63 = new Utils.Tuple(Data_String.take(3)(txt), Data_String.drop(3)(txt));
      if (_63.value0 === "111" && _63.value1 === "11111") {
          return Prelude.pure(Data_Either.applicativeEither)(HALT.value);
      };
      if (_63.value0 === "010" && _63.value1 === "10101") {
          return Prelude.pure(Data_Either.applicativeEither)(PRINT.value);
      };
      if (_63.value0 === "000" && _63.value1 === "00000") {
          return Prelude.pure(Data_Either.applicativeEither)(EMPTY.value);
      };
      if (_63.value0 === "100") {
          return Prelude["<$>"](Data_Either.functorEither)(LOADVAL.create)(strBinToInt(_63.value1));
      };
      if (_63.value0 === "000" && _63.value1 === "10000") {
          return Prelude.pure(Data_Either.applicativeEither)(LOADIN.value);
      };
      if (_63.value0 === "001" && _63.value1 === "10000") {
          return Prelude.pure(Data_Either.applicativeEither)(POP.value);
      };
      if (_63.value0 === "000" && _63.value1 === "10001") {
          return Prelude.pure(Data_Either.applicativeEither)(JUMP.value);
      };
      if (_63.value0 === "000" && _63.value1 === "10101") {
          return Prelude.pure(Data_Either.applicativeEither)(JUMPIF.value);
      };
      if (_63.value0 === "001" && _63.value1 === "10011") {
          return Prelude.pure(Data_Either.applicativeEither)(COMPARE.value);
      };
      if (_63.value0 === "010" && _63.value1 === "01000") {
          return Prelude.pure(Data_Either.applicativeEither)(ADD.value);
      };
      if (_63.value0 === "110" && _63.value1 === "01100") {
          return Prelude.pure(Data_Either.applicativeEither)(DUP.value);
      };
      return throwErr(UnknownInstruction.value);
  };
  var stack = Data_Lens_Lens.lens(function (_3) {
      return _3.stack;
  })(function (_4) {
      return function (_5) {
          var _86 = {};
          for (var _87 in _4) {
              if (_4.hasOwnProperty(_87)) {
                  _86[_87] = _4[_87];
              };
          };
          _86.stack = _5;
          return _86;
      };
  });
  var showError = new Prelude.Show(function (_27) {
      if (_27 instanceof StackUnderflow) {
          return "Stack Underflow";
      };
      if (_27 instanceof UnknownInstruction) {
          return "Unknown Instruction";
      };
      if (_27 instanceof InputError) {
          return "Input Error";
      };
      throw new Error("Failed pattern match at Machine line 71, column 1 - line 76, column 1: " + [ _27.constructor.name ]);
  });
  var output = Data_Lens_Lens.lens(function (_9) {
      return _9.output;
  })(function (_10) {
      return function (_11) {
          var _89 = {};
          for (var _90 in _10) {
              if (_10.hasOwnProperty(_90)) {
                  _89[_90] = _10[_90];
              };
          };
          _89.output = _11;
          return _89;
      };
  });
  var moveBy = function (__copy_n) {
      return function (__copy_zipp) {
          var n = __copy_n;
          var zipp = __copy_zipp;
          tco: while (true) {
              if (n > 0) {
                  var __tco_n = n - 1;
                  var __tco_zipp = Utils.snd(Zipper.next(zipp));
                  n = __tco_n;
                  zipp = __tco_zipp;
                  continue tco;
              };
              if (n < 0) {
                  var __tco_n = n + 1 | 0;
                  var __tco_zipp = Utils.snd(Zipper.back(zipp));
                  n = __tco_n;
                  zipp = __tco_zipp;
                  continue tco;
              };
              if (Prelude.otherwise) {
                  return zipp;
              };
              throw new Error("Failed pattern match: " + [ n.constructor.name, zipp.constructor.name ]);
          };
      };
  };
  var mkMachine = function (inst) {
      return function (input_1) {
          var _93 = Data_List.uncons(inst);
          if (_93 instanceof Data_Maybe.Nothing) {
              return Data_Maybe.Nothing.value;
          };
          if (_93 instanceof Data_Maybe.Just) {
              return new Data_Maybe.Just({
                  code: Zipper.zipper(_93.value0.head)(Data_List.Nil.value)(_93.value0.tail), 
                  stack: Data_List.Nil.value, 
                  input: input_1, 
                  output: Data_List.Nil.value
              });
          };
          throw new Error("Failed pattern match at Machine line 24, column 1 - line 25, column 1: " + [ _93.constructor.name ]);
      };
  };
  var input = Data_Lens_Lens.lens(function (_6) {
      return _6.input;
  })(function (_7) {
      return function (_8) {
          var _97 = {};
          for (var _98 in _7) {
              if (_7.hasOwnProperty(_98)) {
                  _97[_98] = _7[_98];
              };
          };
          _97.input = _8;
          return _97;
      };
  });
  var code = Data_Lens_Lens.lens(function (_0) {
      return _0.code;
  })(function (_1) {
      return function (_2) {
          var _99 = {};
          for (var _100 in _1) {
              if (_1.hasOwnProperty(_100)) {
                  _99[_100] = _1[_100];
              };
          };
          _99.code = _2;
          return _99;
      };
  });
  var movePC = function (machine) {
      var _101 = Zipper.current(machine.code);
      if (_101 instanceof HALT) {
          return Prelude.pure(Data_Either.applicativeEither)(machine);
      };
      if (_101 instanceof PRINT) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof LOADVAL) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof LOADIN) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof POP) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof JUMP) {
          return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (x) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(function (_127) {
                  return Data_Maybe_Unsafe.fromJust(Data_List.tail(_127));
              })(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(x))(machine)));
          })(Data_List.head(machine.stack));
      };
      if (_101 instanceof COMPARE) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof JUMPIF) {
          return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (_25) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(function (_128) {
                  return Data_Maybe_Unsafe.fromJust(Data_List.tail(_128));
              })(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))((function () {
                  var _104 = _25.value1 !== 0;
                  if (_104) {
                      return moveBy(_25.value0);
                  };
                  if (!_104) {
                      return moveBy(1);
                  };
                  throw new Error("Failed pattern match at Machine line 117, column 1 - line 118, column 1: " + [ _104.constructor.name ]);
              })())(machine)));
          })(takeTwo(machine.stack));
      };
      if (_101 instanceof ADD) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof EMPTY) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      if (_101 instanceof DUP) {
          return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(moveBy(1))(machine));
      };
      throw new Error("Failed pattern match at Machine line 117, column 1 - line 118, column 1: " + [ _101.constructor.name ]);
  };
  var $$eval = function (machine) {
      return Control_Bind["=<<"](Data_Either.bindEither)(movePC)((function () {
          var _107 = Zipper.current(machine.code);
          if (_107 instanceof HALT) {
              return Prelude.pure(Data_Either.applicativeEither)(machine);
          };
          if (_107 instanceof JUMP) {
              return Prelude.pure(Data_Either.applicativeEither)(machine);
          };
          if (_107 instanceof JUMPIF) {
              return Prelude.pure(Data_Either.applicativeEither)(machine);
          };
          if (_107 instanceof DUP) {
              return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (x) {
                  return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(x))(machine));
              })(Data_List.head(machine.stack));
          };
          if (_107 instanceof PRINT) {
              return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (x) {
                  return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(output(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(x))(machine));
              })(Data_List.head(machine.stack));
          };
          if (_107 instanceof EMPTY) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(function (s) {
                  var _108 = Data_List["null"](s);
                  if (_108) {
                      return new Data_List.Cons(0, s);
                  };
                  if (!_108) {
                      return new Data_List.Cons(1, s);
                  };
                  throw new Error("Failed pattern match at Machine line 79, column 1 - line 80, column 1: " + [ _108.constructor.name ]);
              })(machine));
          };
          if (_107 instanceof LOADVAL) {
              return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(_107.value0))(machine));
          };
          if (_107 instanceof LOADIN) {
              return Data_Maybe.fromMaybe(throwErr(InputError.value))(Prelude.bind(Data_Maybe.bindMaybe)(Data_List.uncons(machine.input))(function (_12) {
                  return Prelude.pure(Data_Maybe.applicativeMaybe)(Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.set(input(Data_Profunctor_Strong.strongFn))(_12.tail)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(_12.head))(machine))));
              }));
          };
          if (_107 instanceof POP) {
              return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (s) {
                  return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.set(stack(Data_Profunctor_Strong.strongFn))(s)(machine));
              })(Data_List.tail(machine.stack));
          };
          if (_107 instanceof ADD) {
              return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (_23) {
                  return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(function (_129) {
                      return Data_List.Cons.create((function () {
                          var _114 = (_23.value0 + _23.value1 | 0) > 15;
                          if (_114) {
                              return (_23.value0 + _23.value1 | 0) - 15;
                          };
                          if (!_114) {
                              var _115 = (_23.value0 + _23.value1 | 0) < -15;
                              if (_115) {
                                  return 15 - (_23.value0 + _23.value1 | 0);
                              };
                              if (!_115) {
                                  return _23.value0 + _23.value1 | 0;
                              };
                              throw new Error("Failed pattern match: " + [ _115.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Machine line 79, column 1 - line 80, column 1: " + [ _114.constructor.name ]);
                      })())(Data_Maybe_Unsafe.fromJust(Data_List.tail(Data_Maybe_Unsafe.fromJust(Data_List.tail(_129)))));
                  })(machine));
              })(takeTwo(machine.stack));
          };
          if (_107 instanceof COMPARE) {
              return Data_Maybe.maybe(throwErr(StackUnderflow.value))(function (_24) {
                  return Prelude.pure(Data_Either.applicativeEither)(Data_Lens_Setter.over(stack(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create((function () {
                      var _119 = _24.value0 === _24.value1;
                      if (_119) {
                          return 0;
                      };
                      if (!_119) {
                          var _120 = _24.value0 > _24.value1;
                          if (_120) {
                              return 1;
                          };
                          if (!_120) {
                              return -1;
                          };
                          throw new Error("Failed pattern match: " + [ _120.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Machine line 79, column 1 - line 80, column 1: " + [ _119.constructor.name ]);
                  })()))(machine));
              })(takeTwo(machine.stack));
          };
          throw new Error("Failed pattern match at Machine line 79, column 1 - line 80, column 1: " + [ _107.constructor.name ]);
      })());
  };
  var halted = function (machine) {
      var _123 = Zipper.current(machine.code);
      if (_123 instanceof HALT) {
          return true;
      };
      return Data_Either.isLeft($$eval(machine));
  };
  var hasErrors = function (machine) {
      var _124 = $$eval(machine);
      if (_124 instanceof Data_Either.Left) {
          return new Data_Maybe.Just(_124.value0);
      };
      if (_124 instanceof Data_Either.Right) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Machine line 165, column 1 - line 166, column 1: " + [ _124.constructor.name ]);
  };
  exports["StackUnderflow"] = StackUnderflow;
  exports["UnknownInstruction"] = UnknownInstruction;
  exports["InputError"] = InputError;
  exports["HALT"] = HALT;
  exports["PRINT"] = PRINT;
  exports["LOADVAL"] = LOADVAL;
  exports["LOADIN"] = LOADIN;
  exports["POP"] = POP;
  exports["JUMP"] = JUMP;
  exports["JUMPIF"] = JUMPIF;
  exports["COMPARE"] = COMPARE;
  exports["ADD"] = ADD;
  exports["EMPTY"] = EMPTY;
  exports["DUP"] = DUP;
  exports["strBinToInt"] = strBinToInt;
  exports["translate"] = translate;
  exports["hasErrors"] = hasErrors;
  exports["halted"] = halted;
  exports["moveBy"] = moveBy;
  exports["movePC"] = movePC;
  exports["takeTwo"] = takeTwo;
  exports["eval"] = $$eval;
  exports["throwErr"] = throwErr;
  exports["output"] = output;
  exports["input"] = input;
  exports["stack"] = stack;
  exports["code"] = code;
  exports["mkMachine"] = mkMachine;
  exports["showError"] = showError;;
 
})(PS["Machine"] = PS["Machine"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_String = PS["Data.String"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var CanvasUtils = PS["CanvasUtils"];
  var Input = PS["Input"];     
  var ShowAll = (function () {
      function ShowAll() {

      };
      ShowAll.value = new ShowAll();
      return ShowAll;
  })();
  var splitLine = function (text) {
      return function (i) {
          var n = i * 80 | 0;
          var _1 = Data_String.uncons(Data_String.drop(n + 79 | 0)(text));
          if (_1 instanceof Data_Maybe.Nothing) {
              return Data_String.take(80)(Data_String.drop(n)(text));
          };
          if (_1 instanceof Data_Maybe.Just) {
              var _2 = Prelude["=="](Prelude.eqChar)(_1.value0.head)(" ");
              if (_2) {
                  return Data_String.take(80)(Data_String.drop(n)(text));
              };
              if (!_2) {
                  var _3 = Data_String.uncons(Data_String.drop(n + 80 | 0)(text));
                  if (_3 instanceof Data_Maybe.Nothing) {
                      return Data_String.take(80)(Data_String.drop(n)(text));
                  };
                  if (_3 instanceof Data_Maybe.Just) {
                      var _4 = Prelude["=="](Prelude.eqChar)(_3.value0.head)(" ");
                      if (_4) {
                          return Data_String.take(80)(Data_String.drop(n)(text));
                      };
                      if (!_4) {
                          return Data_String.take(80)(Data_String.drop(n)(text)) + "-";
                      };
                      throw new Error("Failed pattern match: " + [ _4.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _3.constructor.name ]);
              };
              throw new Error("Failed pattern match at TextBar line 92, column 1 - line 108, column 50: " + [ _2.constructor.name ]);
          };
          throw new Error("Failed pattern match at TextBar line 92, column 1 - line 108, column 50: " + [ _1.constructor.name ]);
      };
  };
  var size = {
      x: CanvasUtils.width - 40.0, 
      y: 200.0
  };
  var render = function (ctx) {
      return function (bar) {
          return function __do() {
              (function () {
                  if (bar.state instanceof ShowAll) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle(bar.bgcolor)(ctx)();
                          Graphics_Canvas.fillRect(ctx)({
                              x: bar.pos.x, 
                              y: bar.pos.y, 
                              w: bar.size.x, 
                              h: bar.size.y
                          })();
                          Graphics_Canvas.setFillStyle(bar.color)(ctx)();
                          Graphics_Canvas.setFont("16px monospace")(ctx)();
                          var texts = Prelude.map(Prelude.functorArray)(splitLine(bar.text))(Data_Array.range(0)(Data_String.length(bar.text) / 80 | 0));
                          Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(Data_Array.zipWith(function (i) {
                              return function (text) {
                                  return Graphics_Canvas.fillText(ctx)(text)(bar.pos.x + 40.0)(bar.pos.y + 40.0 + 30.0 * Data_Int.toNumber(i));
                              };
                          })(Data_Array.range(0)(Data_Array.length(texts)))(texts))();
                          return Prelude.unit;
                      };
                  };
                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
              })()();
              return Prelude.unit;
          };
      };
  };
  var position = {
      x: 20.0, 
      y: CanvasUtils.height - 250.0
  };
  var mkText = function (str) {
      return {
          pos: position, 
          size: size, 
          speed: 1.0, 
          bgcolor: "rgba(0,0,0,0.7)", 
          color: "white", 
          text: str, 
          state: ShowAll.value
      };
  };
  exports["ShowAll"] = ShowAll;
  exports["splitLine"] = splitLine;
  exports["render"] = render;
  exports["mkText"] = mkText;
  exports["size"] = size;
  exports["position"] = position;;
 
})(PS["TextBar"] = PS["TextBar"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var TextBar = PS["TextBar"];
  var Data_Foldable = PS["Data.Foldable"];     
  var scrErr = {
      textbar: TextBar.mkText("No screens available"), 
      gfx: Data_Maybe.Nothing.value
  };
  var renderScreen = function (context) {
      return function (screen) {
          return function __do() {
              (function () {
                  if (screen.gfx instanceof Data_Maybe.Just) {
                      return function __do() {
                          Graphics_Canvas.drawImage(context)(screen.gfx.value0)(0.0)(0.0)();
                          return Prelude.unit;
                      };
                  };
                  if (screen.gfx instanceof Data_Maybe.Nothing) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("#900")(context)();
                          Graphics_Canvas.fillRect(context)({
                              x: 0.0, 
                              y: 100.0, 
                              w: CanvasUtils.width, 
                              h: CanvasUtils.height - 200.0
                          })();
                          return Prelude.unit;
                      };
                  };
                  throw new Error("Failed pattern match at Screen line 104, column 1 - line 105, column 1: " + [ screen.gfx.constructor.name ]);
              })()();
              TextBar.render(context)(screen.textbar)();
              return Prelude.unit;
          };
      };
  };
  var mkScreen = function (img) {
      return function (t) {
          return {
              textbar: t, 
              gfx: new Data_Maybe.Just(img)
          };
      };
  };
  var scrArr = function (img) {
      return function (txts) {
          return Prelude.map(Prelude.functorArray)(function (_6) {
              return mkScreen(img)(TextBar.mkText(_6));
          })(Data_Array.filter(function (_0) {
              return Prelude["/="](Prelude.eqString)(_0)("");
          })(Data_String.split("\n\n")(txts)));
      };
  };
  var screens = function (img) {
      return function (txts) {
          var _3 = Data_List.toList(Data_Foldable.foldableArray)(scrArr(img)(txts));
          if (_3 instanceof Data_List.Nil) {
              return Zipper.zipper(scrErr)(Data_List.Nil.value)(Data_List.Nil.value);
          };
          if (_3 instanceof Data_List.Cons) {
              return Zipper.zipper(_3.value0)(Data_List.Nil.value)(_3.value1);
          };
          throw new Error("Failed pattern match at Screen line 39, column 1 - line 40, column 1: " + [ _3.constructor.name ]);
      };
  };
  var intro = "Welcome to CompCompany.\n\nFor the past 40 years our scientists and engineers have been working on a top\nsecret project.\n\nAt last, they have succeeded in creating a marvelous machine,\na computing machine.\n\nWe call it 'The Computing Machine'.\n\nYou had the fortune to be selected as one of the chosen few to operate The Computing Machine.\n\nAt CompCompany, we have a lot of challenges waiting to be solved.\n\nFortunately for you, The Computing Machine is really simple to operate, it only has two buttons!\n\nAll you have to do is insert the right combination of the two buttons, and The Computing Machine will do the rest!\n\nOur engineering team will explain the rest.\n\nGood Luck!\n\n...\n\n.....\n\nAlright! We are going to give you a few missions now.\n\nJust write your solution with the 0 and 1 buttons and press the TEST button (or press T on your keyboard)\nFor us to test your solution. If you pass our test, we will give you another mission.\n\nIf you just want to try things yourself, use the RUN button (or press Enter) to test things yourself.\n\nTo enter input or view output for yourself, just touch the paper slips\non the side of The Computing Machine.\n\nAnd if anything goes wrong, you can always press the RESET or POWER button (or Esc) to go back\nor start fresh.\n\nThat's it.\n\nOh, and just scroll to the Machine Manual at the bottom of the page.\n\nGood luck!\n";
  exports["renderScreen"] = renderScreen;
  exports["intro"] = intro;
  exports["scrArr"] = scrArr;
  exports["screens"] = screens;
  exports["scrErr"] = scrErr;
  exports["mkScreen"] = mkScreen;;
 
})(PS["Screen"] = PS["Screen"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Either = PS["Data.Either"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Utils = PS["Utils"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var TextBar = PS["TextBar"];
  var Input = PS["Input"];
  var Machine = PS["Machine"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];     
  var ShowInput = (function () {
      function ShowInput() {

      };
      ShowInput.value = new ShowInput();
      return ShowInput;
  })();
  var ShowOutput = (function () {
      function ShowOutput() {

      };
      ShowOutput.value = new ShowOutput();
      return ShowOutput;
  })();
  var ShowMachine = (function () {
      function ShowMachine() {

      };
      ShowMachine.value = new ShowMachine();
      return ShowMachine;
  })();
  var RunMachine = (function () {
      function RunMachine() {

      };
      RunMachine.value = new RunMachine();
      return RunMachine;
  })();
  var TestMachine = (function () {
      function TestMachine() {

      };
      TestMachine.value = new TestMachine();
      return TestMachine;
  })();
  var ShowError = (function () {
      function ShowError(value0) {
          this.value0 = value0;
      };
      ShowError.create = function (value0) {
          return new ShowError(value0);
      };
      return ShowError;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var zeroButton = {
      pos: {
          x: 315.0, 
          y: 630.0
      }, 
      size: {
          x: 131.0, 
          y: 80.0
      }
  };
  var testButton = {
      pos: {
          x: 135.0, 
          y: 435.0
      }, 
      size: {
          x: 65.0, 
          y: 45.0
      }
  };
  var splitLine = function (text) {
      return function (i) {
          var n = i * 80 | 0;
          var _15 = Data_String.uncons(Data_String.drop(n + 79 | 0)(text));
          if (_15 instanceof Data_Maybe.Nothing) {
              return Data_String.take(80)(Data_String.drop(n)(text));
          };
          if (_15 instanceof Data_Maybe.Just) {
              var _16 = Prelude["=="](Prelude.eqChar)(_15.value0.head)(" ");
              if (_16) {
                  return Data_String.take(80)(Data_String.drop(n)(text));
              };
              if (!_16) {
                  var _17 = Data_String.uncons(Data_String.drop(n + 80 | 0)(text));
                  if (_17 instanceof Data_Maybe.Nothing) {
                      return Data_String.take(80)(Data_String.drop(n)(text));
                  };
                  if (_17 instanceof Data_Maybe.Just) {
                      var _18 = Prelude["=="](Prelude.eqChar)(_17.value0.head)(" ");
                      if (_18) {
                          return Data_String.take(80)(Data_String.drop(n)(text));
                      };
                      if (!_18) {
                          return Data_String.take(80)(Data_String.drop(n)(text)) + "-";
                      };
                      throw new Error("Failed pattern match: " + [ _18.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _17.constructor.name ]);
              };
              throw new Error("Failed pattern match at SimScreen line 431, column 1 - line 453, column 1: " + [ _16.constructor.name ]);
          };
          throw new Error("Failed pattern match at SimScreen line 431, column 1 - line 453, column 1: " + [ _15.constructor.name ]);
      };
  };
  var runTest = function (state) {
      var insts = Data_Traversable.traverse(Data_List.traversableList)(Data_Either.applicativeEither)(Machine.translate)(Data_List.reverse(state.code));
      if (insts instanceof Data_Either.Left) {
          var _26 = {};
          for (var _27 in state) {
              if (state.hasOwnProperty(_27)) {
                  _26[_27] = state[_27];
              };
          };
          _26.state = ShowError.create("Loading Code failed: " + (Prelude.show(Machine.showError)(insts.value0) + "."));
          return _26;
      };
      if (insts instanceof Data_Either.Right) {
          var _29 = {};
          for (var _30 in state) {
              if (state.hasOwnProperty(_30)) {
                  _29[_30] = state[_30];
              };
          };
          _29.machine = Machine.mkMachine(insts.value0)((Zipper.current(state.tests)).input);
          return _29;
      };
      throw new Error("Failed pattern match at SimScreen line 301, column 1 - line 310, column 1: " + [ insts.constructor.name ]);
  };
  var runButton = {
      pos: {
          x: 135.0, 
          y: 350.0
      }, 
      size: {
          x: 65.0, 
          y: 45.0
      }
  };
  var resetMachine = function (input) {
      return function (state) {
          var _32 = input.screenDir < 0.0;
          if (_32) {
              if (state.state instanceof ShowMachine) {
                  var _34 = {};
                  for (var _35 in state) {
                      if (state.hasOwnProperty(_35)) {
                          _34[_35] = state[_35];
                      };
                  };
                  _34.machine = Data_Maybe.Nothing.value;
                  _34.code = Data_List.Nil.value;
                  _34.inputs = Data_List.Nil.value;
                  _34.outputs = Data_List.Nil.value;
                  _34.currLine = "";
                  return _34;
              };
              if (state.state instanceof ShowOutput) {
                  var _36 = {};
                  for (var _37 in state) {
                      if (state.hasOwnProperty(_37)) {
                          _36[_37] = state[_37];
                      };
                  };
                  _36.state = ShowMachine.value;
                  return _36;
              };
              if (state.state instanceof ShowInput) {
                  var _38 = {};
                  for (var _39 in state) {
                      if (state.hasOwnProperty(_39)) {
                          _38[_39] = state[_39];
                      };
                  };
                  _38.state = ShowMachine.value;
                  return _38;
              };
              if (state.state instanceof ShowError) {
                  var _40 = {};
                  for (var _41 in state) {
                      if (state.hasOwnProperty(_41)) {
                          _40[_41] = state[_41];
                      };
                  };
                  _40.state = ShowMachine.value;
                  _40.machine = Data_Maybe.Nothing.value;
                  return _40;
              };
              if (state.state instanceof RunMachine) {
                  var _43 = {};
                  for (var _44 in state) {
                      if (state.hasOwnProperty(_44)) {
                          _43[_44] = state[_44];
                      };
                  };
                  _43.state = ShowMachine.value;
                  _43.machine = Data_Maybe.Nothing.value;
                  return _43;
              };
              if (state.state instanceof TestMachine) {
                  var _45 = {};
                  for (var _46 in state) {
                      if (state.hasOwnProperty(_46)) {
                          _45[_46] = state[_46];
                      };
                  };
                  _45.state = ShowMachine.value;
                  _45.machine = Data_Maybe.Nothing.value;
                  return _45;
              };
              if (state.state instanceof Done) {
                  return state;
              };
              throw new Error("Failed pattern match: " + [ state.state.constructor.name ]);
          };
          if (!_32) {
              return state;
          };
          throw new Error("Failed pattern match at SimScreen line 191, column 1 - line 192, column 1: " + [ _32.constructor.name ]);
      };
  };
  var resetButton = {
      pos: {
          x: 135.0, 
          y: 265.0
      }, 
      size: {
          x: 60.0, 
          y: 40.0
      }
  };
  var renderMachine = function (ctx) {
      return function (screen) {
          return function __do() {
              Graphics_Canvas.setFillStyle("#DD4499")(ctx)();
              Graphics_Canvas.fillText(ctx)("> " + screen.currLine)(350.0)(230.0 + 30.0 * 8.0)();
              return Prelude.unit;
          };
      };
  };
  var renderError = function (err) {
      return function (ctx) {
          return function (state) {
              return function __do() {
                  Graphics_Canvas.setFillStyle("rgba(235,135,155,0.9)")(ctx)();
                  Graphics_Canvas.fillRect(ctx)({
                      x: 80.0, 
                      y: 20.0, 
                      w: CanvasUtils.width - 160.0, 
                      h: 100.0
                  })();
                  Graphics_Canvas.setFillStyle("white")(ctx)();
                  Graphics_Canvas.setFont("16px monospace")(ctx)();
                  var texts = Prelude.map(Data_List.functorList)(splitLine(err))(Data_List.range(0)(Data_String.length(err) / 80 | 0));
                  Data_Traversable.sequence(Data_List.traversableList)(Control_Monad_Eff.applicativeEff)(Data_List.zipWith(function (i) {
                      return function (text) {
                          return Graphics_Canvas.fillText(ctx)(text)(120.0)(60.0 + 30.0 * Data_Int.toNumber(i));
                      };
                  })(Data_List.range(0)(Data_List.length(texts)))(texts))();
                  Graphics_Canvas.setFont("18px monospace")(ctx)();
                  return Prelude.unit;
              };
          };
      };
  };
  var renderDone = function (ctx) {
      return function (state) {
          return function __do() {
              Graphics_Canvas.setFillStyle("rgba(35,235,155,0.9)")(ctx)();
              Graphics_Canvas.fillRect(ctx)({
                  x: 80.0, 
                  y: 20.0, 
                  w: CanvasUtils.width - 160.0, 
                  h: 100.0
              })();
              Graphics_Canvas.setFillStyle("white")(ctx)();
              Graphics_Canvas.fillText(ctx)("Great Job!")(120.0)(60.0)();
              return Prelude.unit;
          };
      };
  };
  var powerButton = {
      pos: {
          x: 130.0, 
          y: 190.0
      }, 
      size: {
          x: 50.0, 
          y: 40.0
      }
  };
  var outButton = {
      pos: {
          x: 880.0, 
          y: 500.0
      }, 
      size: {
          x: 65.0, 
          y: 75.0
      }
  };
  var oneButton = {
      pos: {
          x: 497.0, 
          y: 627.0
      }, 
      size: {
          x: 134.0, 
          y: 82.0
      }
  };
  var mkSimScreen = function (tests) {
      return function (img) {
          return {
              code: Data_List.Nil.value, 
              currInput: "", 
              currLine: "", 
              gfx: img, 
              compRun: false, 
              inputs: Data_List.Nil.value, 
              outputs: Data_List.Nil.value, 
              machine: Data_Maybe.Nothing.value, 
              tests: tests, 
              state: ShowMachine.value
          };
      };
  };
  var inputs = Data_Lens_Lens.lens(function (_9) {
      return _9.inputs;
  })(function (_10) {
      return function (_11) {
          var _47 = {};
          for (var _48 in _10) {
              if (_10.hasOwnProperty(_48)) {
                  _47[_48] = _10[_48];
              };
          };
          _47.inputs = _11;
          return _47;
      };
  });
  var startMachine = function (input) {
      return function (state) {
          var _49 = Data_Maybe.isJust(state.machine);
          if (_49) {
              var _50 = {};
              for (var _51 in state) {
                  if (state.hasOwnProperty(_51)) {
                      _50[_51] = state[_51];
                  };
              };
              _50.machine = Data_Maybe.Nothing.value;
              return _50;
          };
          if (!_49) {
              var insts = Data_Traversable.traverse(Data_List.traversableList)(Data_Either.applicativeEither)(Machine.translate)(Data_List.reverse(state.code));
              if (insts instanceof Data_Either.Left) {
                  var _53 = {};
                  for (var _54 in state) {
                      if (state.hasOwnProperty(_54)) {
                          _53[_54] = state[_54];
                      };
                  };
                  _53.state = ShowError.create("Code load failed: " + (Prelude.show(Machine.showError)(insts.value0) + "."));
                  return _53;
              };
              if (insts instanceof Data_Either.Right) {
                  var _56 = Data_Traversable.traverse(Data_List.traversableList)(Data_Either.applicativeEither)(Machine.strBinToInt)(state.inputs);
                  if (_56 instanceof Data_Either.Left) {
                      var _57 = {};
                      for (var _58 in state) {
                          if (state.hasOwnProperty(_58)) {
                              _57[_58] = state[_58];
                          };
                      };
                      _57.state = ShowError.create("Input load failed: " + (Prelude.show(Machine.showError)(_56.value0) + "."));
                      return _57;
                  };
                  if (_56 instanceof Data_Either.Right) {
                      var _60 = {};
                      for (var _61 in state) {
                          if (state.hasOwnProperty(_61)) {
                              _60[_61] = state[_61];
                          };
                      };
                      _60.machine = Machine.mkMachine(insts.value0)(_56.value0);
                      return _60;
                  };
                  throw new Error("Failed pattern match: " + [ _56.constructor.name ]);
              };
              throw new Error("Failed pattern match: " + [ insts.constructor.name ]);
          };
          throw new Error("Failed pattern match at SimScreen line 169, column 1 - line 170, column 1: " + [ _49.constructor.name ]);
      };
  };
  var inButton = {
      pos: {
          x: 30.0, 
          y: 495.0
      }, 
      size: {
          x: 60.0, 
          y: 45.0
      }
  };
  var updateMouseInput = function (i) {
      if (i.mouseClick instanceof Data_Maybe.Nothing) {
          return i;
      };
      if (i.mouseClick instanceof Data_Maybe.Just) {
          var _65 = CanvasUtils.pointInRect(i.mouseClick.value0)(zeroButton);
          if (_65) {
              return Data_Lens_Setter.set(function (_186) {
                  return Input.zeroOne(Data_Profunctor_Strong.strongFn)(Input.zero(Data_Profunctor_Strong.strongFn)(_186));
              })(true)(i);
          };
          if (!_65) {
              var _66 = CanvasUtils.pointInRect(i.mouseClick.value0)(oneButton);
              if (_66) {
                  return Data_Lens_Setter.set(function (_187) {
                      return Input.zeroOne(Data_Profunctor_Strong.strongFn)(Input.one(Data_Profunctor_Strong.strongFn)(_187));
                  })(true)(i);
              };
              if (!_66) {
                  var _67 = CanvasUtils.pointInRect(i.mouseClick.value0)(runButton);
                  if (_67) {
                      var _68 = {};
                      for (var _69 in i) {
                          if (i.hasOwnProperty(_69)) {
                              _68[_69] = i[_69];
                          };
                      };
                      _68.screenDir = 1.0;
                      return _68;
                  };
                  if (!_67) {
                      var _70 = CanvasUtils.pointInRect(i.mouseClick.value0)(testButton);
                      if (_70) {
                          var _71 = {};
                          for (var _72 in i) {
                              if (i.hasOwnProperty(_72)) {
                                  _71[_72] = i[_72];
                              };
                          };
                          _71.runTests = true;
                          return _71;
                      };
                      if (!_70) {
                          var _73 = CanvasUtils.pointInRect(i.mouseClick.value0)(resetButton);
                          if (_73) {
                              var _74 = {};
                              for (var _75 in i) {
                                  if (i.hasOwnProperty(_75)) {
                                      _74[_75] = i[_75];
                                  };
                              };
                              _74.screenDir = -1.0;
                              return _74;
                          };
                          if (!_73) {
                              var _76 = CanvasUtils.pointInRect(i.mouseClick.value0)(powerButton);
                              if (_76) {
                                  var _77 = {};
                                  for (var _78 in i) {
                                      if (i.hasOwnProperty(_78)) {
                                          _77[_78] = i[_78];
                                      };
                                  };
                                  _77.screenDir = -1.0;
                                  return _77;
                              };
                              if (!_76) {
                                  var _79 = CanvasUtils.pointInRect(i.mouseClick.value0)(inButton);
                                  if (_79) {
                                      var _80 = {};
                                      for (var _81 in i) {
                                          if (i.hasOwnProperty(_81)) {
                                              _80[_81] = i[_81];
                                          };
                                      };
                                      _80.io = new Utils.Tuple(true, false);
                                      return _80;
                                  };
                                  if (!_79) {
                                      var _82 = CanvasUtils.pointInRect(i.mouseClick.value0)(outButton);
                                      if (_82) {
                                          var _83 = {};
                                          for (var _84 in i) {
                                              if (i.hasOwnProperty(_84)) {
                                                  _83[_84] = i[_84];
                                              };
                                          };
                                          _83.io = new Utils.Tuple(false, true);
                                          return _83;
                                      };
                                      if (!_82) {
                                          return i;
                                      };
                                      throw new Error("Failed pattern match: " + [ _82.constructor.name ]);
                                  };
                                  throw new Error("Failed pattern match: " + [ _79.constructor.name ]);
                              };
                              throw new Error("Failed pattern match: " + [ _76.constructor.name ]);
                          };
                          throw new Error("Failed pattern match: " + [ _73.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ _70.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _67.constructor.name ]);
              };
              throw new Error("Failed pattern match: " + [ _66.constructor.name ]);
          };
          throw new Error("Failed pattern match at SimScreen line 123, column 1 - line 147, column 1: " + [ _65.constructor.name ]);
      };
      throw new Error("Failed pattern match at SimScreen line 123, column 1 - line 147, column 1: " + [ i.mouseClick.constructor.name ]);
  };
  var getPosition = function (x) {
      return function (y) {
          return function (i) {
              return {
                  x: x + 100.0 * Data_Int.toNumber(Prelude.div(Prelude.moduloSemiringInt)(i)(8)), 
                  y: y + 30.0 * Data_Int.toNumber(i % 8)
              };
          };
      };
  };
  var renderInput = function (ctx) {
      return function (screen) {
          return function __do() {
              Graphics_Canvas.setFillStyle("rgba(235,235,255,0.9)")(ctx)();
              Graphics_Canvas.fillRect(ctx)({
                  x: 40.0, 
                  y: 100.0, 
                  w: 300.0, 
                  h: 400.0
              })();
              Graphics_Canvas.setFillStyle("#004499")(ctx)();
              Data_Traversable.sequence(Data_List.traversableList)(Control_Monad_Eff.applicativeEff)(Data_List.zipWith(function (p) {
                  return function (txt) {
                      return Graphics_Canvas.fillText(ctx)(txt)(p.x)(p.y);
                  };
              })(Prelude.map(Data_List.functorList)(getPosition(80.0)(150.0))(Data_List.range(0)(8)))(Data_List.reverse(screen.inputs)))();
              Graphics_Canvas.setFillStyle("#DD4499")(ctx)();
              Graphics_Canvas.fillText(ctx)("> " + screen.currInput)(80.0)(150.0 + 30.0 * 10.0)();
              return Prelude.unit;
          };
      };
  };
  var renderOutput = function (ctx) {
      return function (screen) {
          return function __do() {
              Graphics_Canvas.setFillStyle("rgba(235,235,255,0.9)")(ctx)();
              Graphics_Canvas.fillRect(ctx)({
                  x: 700.0, 
                  y: 100.0, 
                  w: 300.0, 
                  h: 400.0
              })();
              Graphics_Canvas.setFillStyle("#004499")(ctx)();
              Data_Traversable.sequence(Data_List.traversableList)(Control_Monad_Eff.applicativeEff)(Data_List.zipWith(function (p) {
                  return function (txt) {
                      return Graphics_Canvas.fillText(ctx)(txt)(p.x)(p.y);
                  };
              })(Prelude.map(Data_List.functorList)(getPosition(740.0)(150.0))(Data_List.range(0)(8)))(Data_List.reverse(Prelude.map(Data_List.functorList)(Prelude.show(Prelude.showInt))(screen.outputs))))();
              return Prelude.unit;
          };
      };
  };
  var render = function (ctx) {
      return function (screen) {
          return function __do() {
              Graphics_Canvas.drawImage(ctx)(screen.gfx)(0.0)(0.0)();
              Graphics_Canvas.setFillStyle("#CC3388")(ctx)();
              Data_Traversable.sequence(Data_List.traversableList)(Control_Monad_Eff.applicativeEff)(Data_List.zipWith(function (p) {
                  return function (txt) {
                      return Graphics_Canvas.fillText(ctx)(txt)(p.x)(p.y);
                  };
              })(Prelude.map(Data_List.functorList)(getPosition(350.0)(230.0))(Data_List.range(0)(40)))(Data_List.reverse(screen.code)))();
              Graphics_Canvas.setFont("18px monospace")(ctx)();
              (function () {
                  if (screen.state instanceof ShowMachine) {
                      return renderMachine(ctx)(screen);
                  };
                  if (screen.state instanceof ShowInput) {
                      return renderInput(ctx)(screen);
                  };
                  if (screen.state instanceof ShowOutput) {
                      return renderOutput(ctx)(screen);
                  };
                  if (screen.state instanceof RunMachine) {
                      return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
                  };
                  if (screen.state instanceof TestMachine) {
                      return function __do() {
                          renderMachine(ctx)(screen)();
                          renderInput(ctx)(screen)();
                          return renderOutput(ctx)(screen)();
                      };
                  };
                  if (screen.state instanceof ShowError) {
                      return renderError(screen.state.value0)(ctx)(screen);
                  };
                  if (screen.state instanceof Done) {
                      return renderDone(ctx)(screen);
                  };
                  throw new Error("Failed pattern match at SimScreen line 327, column 1 - line 328, column 1: " + [ screen.state.constructor.name ]);
              })()();
              (function () {
                  if (screen.state instanceof ShowMachine) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Zeros and Ones")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof ShowInput) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Inputs")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof ShowOutput) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Outputs")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof TestMachine) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Running Tests...")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof RunMachine) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Running...")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof ShowError) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Error")(120.0)(40.0)();
                      };
                  };
                  if (screen.state instanceof Done) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("white")(ctx)();
                          return Graphics_Canvas.fillText(ctx)("Done")(120.0)(40.0)();
                      };
                  };
                  throw new Error("Failed pattern match at SimScreen line 327, column 1 - line 328, column 1: " + [ screen.state.constructor.name ]);
              })()();
              return Prelude.unit;
          };
      };
  };
  var done = function (state) {
      if (state.state instanceof Done) {
          return true;
      };
      return false;
  };
  var currLine = Data_Lens_Lens.lens(function (_3) {
      return _3.currLine;
  })(function (_4) {
      return function (_5) {
          var _91 = {};
          for (var _92 in _4) {
              if (_4.hasOwnProperty(_92)) {
                  _91[_92] = _4[_92];
              };
          };
          _91.currLine = _5;
          return _91;
      };
  });
  var currInput = Data_Lens_Lens.lens(function (_0) {
      return _0.currInput;
  })(function (_1) {
      return function (_2) {
          var _93 = {};
          for (var _94 in _1) {
              if (_1.hasOwnProperty(_94)) {
                  _93[_94] = _1[_94];
              };
          };
          _93.currInput = _2;
          return _93;
      };
  });
  var updateInput = function (input) {
      return function (state) {
          if (state.state instanceof ShowInput) {
              var line = state.currInput + (function () {
                  if (input.zeroOne.zero) {
                      return "0";
                  };
                  if (!input.zeroOne.zero) {
                      return "" + (function () {
                          if (input.zeroOne.one) {
                              return "1";
                          };
                          if (!input.zeroOne.one) {
                              return "";
                          };
                          throw new Error("Failed pattern match: " + [ input.zeroOne.one.constructor.name ]);
                      })();
                  };
                  throw new Error("Failed pattern match at SimScreen line 314, column 11 - line 315, column 7: " + [ input.zeroOne.zero.constructor.name ]);
              })();
              var _98 = Data_String.length(line) >= 5;
              if (_98) {
                  return Data_Lens_Setter.over(inputs(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(Data_String.take(5)(line)))(Data_Lens_Setter.set(currInput(Data_Profunctor_Strong.strongFn))(Data_String.drop(5)(line))(state));
              };
              if (!_98) {
                  return Data_Lens_Setter.set(currInput(Data_Profunctor_Strong.strongFn))(line)(state);
              };
              throw new Error("Failed pattern match at SimScreen line 310, column 1 - line 311, column 1: " + [ _98.constructor.name ]);
          };
          return state;
      };
  };
  var updateState = function (input) {
      return function (state) {
          if (state.state instanceof ShowMachine) {
              var _100 = Utils.fst(input.io);
              if (_100) {
                  var _101 = {};
                  for (var _102 in state) {
                      if (state.hasOwnProperty(_102)) {
                          _101[_102] = state[_102];
                      };
                  };
                  _101.state = ShowInput.value;
                  return _101;
              };
              if (!_100) {
                  var _103 = Utils.snd(input.io);
                  if (_103) {
                      var _104 = {};
                      for (var _105 in state) {
                          if (state.hasOwnProperty(_105)) {
                              _104[_105] = state[_105];
                          };
                      };
                      _104.state = ShowOutput.value;
                      return _104;
                  };
                  if (!_103) {
                      if (input.runTests) {
                          var _107 = {};
                          for (var _108 in state) {
                              if (state.hasOwnProperty(_108)) {
                                  _107[_108] = state[_108];
                              };
                          };
                          _107.state = TestMachine.value;
                          return _107;
                      };
                      if (!input.runTests) {
                          var _109 = input.screenDir > 0.0;
                          if (_109) {
                              var _110 = {};
                              for (var _111 in state) {
                                  if (state.hasOwnProperty(_111)) {
                                      _110[_111] = state[_111];
                                  };
                              };
                              _110.state = RunMachine.value;
                              return _110;
                          };
                          if (!_109) {
                              return state;
                          };
                          throw new Error("Failed pattern match: " + [ _109.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ input.runTests.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _103.constructor.name ]);
              };
              throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ _100.constructor.name ]);
          };
          if (state.state instanceof ShowInput) {
              return updateInput(input)((function () {
                  var _112 = Utils.fst(input.io);
                  if (_112) {
                      var _113 = {};
                      for (var _114 in state) {
                          if (state.hasOwnProperty(_114)) {
                              _113[_114] = state[_114];
                          };
                      };
                      _113.state = ShowMachine.value;
                      return _113;
                  };
                  if (!_112) {
                      var _115 = Utils.snd(input.io);
                      if (_115) {
                          var _116 = {};
                          for (var _117 in state) {
                              if (state.hasOwnProperty(_117)) {
                                  _116[_117] = state[_117];
                              };
                          };
                          _116.state = ShowOutput.value;
                          return _116;
                      };
                      if (!_115) {
                          if (input.runTests) {
                              var _119 = {};
                              for (var _120 in state) {
                                  if (state.hasOwnProperty(_120)) {
                                      _119[_120] = state[_120];
                                  };
                              };
                              _119.state = TestMachine.value;
                              return _119;
                          };
                          if (!input.runTests) {
                              var _121 = input.screenDir > 0.0;
                              if (_121) {
                                  var _122 = {};
                                  for (var _123 in state) {
                                      if (state.hasOwnProperty(_123)) {
                                          _122[_123] = state[_123];
                                      };
                                  };
                                  _122.state = RunMachine.value;
                                  return _122;
                              };
                              if (!_121) {
                                  return state;
                              };
                              throw new Error("Failed pattern match: " + [ _121.constructor.name ]);
                          };
                          throw new Error("Failed pattern match: " + [ input.runTests.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ _115.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ _112.constructor.name ]);
              })());
          };
          if (state.state instanceof ShowOutput) {
              var _124 = Utils.snd(input.io);
              if (_124) {
                  var _125 = {};
                  for (var _126 in state) {
                      if (state.hasOwnProperty(_126)) {
                          _125[_126] = state[_126];
                      };
                  };
                  _125.state = ShowMachine.value;
                  return _125;
              };
              if (!_124) {
                  var _127 = Utils.fst(input.io);
                  if (_127) {
                      var _128 = {};
                      for (var _129 in state) {
                          if (state.hasOwnProperty(_129)) {
                              _128[_129] = state[_129];
                          };
                      };
                      _128.state = ShowInput.value;
                      return _128;
                  };
                  if (!_127) {
                      if (input.runTests) {
                          var _131 = {};
                          for (var _132 in state) {
                              if (state.hasOwnProperty(_132)) {
                                  _131[_132] = state[_132];
                              };
                          };
                          _131.state = TestMachine.value;
                          return _131;
                      };
                      if (!input.runTests) {
                          var _133 = input.screenDir > 0.0;
                          if (_133) {
                              var _134 = {};
                              for (var _135 in state) {
                                  if (state.hasOwnProperty(_135)) {
                                      _134[_135] = state[_135];
                                  };
                              };
                              _134.state = RunMachine.value;
                              return _134;
                          };
                          if (!_133) {
                              return state;
                          };
                          throw new Error("Failed pattern match: " + [ _133.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ input.runTests.constructor.name ]);
                  };
                  throw new Error("Failed pattern match: " + [ _127.constructor.name ]);
              };
              throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ _124.constructor.name ]);
          };
          if (state.state instanceof TestMachine) {
              if (state.machine instanceof Data_Maybe.Nothing) {
                  return runTest((function () {
                      var _137 = {};
                      for (var _138 in state) {
                          if (state.hasOwnProperty(_138)) {
                              _137[_138] = state[_138];
                          };
                      };
                      _137.tests = Zipper.start(state.tests);
                      return _137;
                  })());
              };
              if (state.machine instanceof Data_Maybe.Just) {
                  var _139 = Machine.halted(state.machine.value0);
                  if (_139) {
                      var _140 = Machine.hasErrors(state.machine.value0);
                      if (_140 instanceof Data_Maybe.Just) {
                          var _141 = {};
                          for (var _142 in state) {
                              if (state.hasOwnProperty(_142)) {
                                  _141[_142] = state[_142];
                              };
                          };
                          _141.state = ShowError.create("Run failed: " + (Prelude.show(Machine.showError)(_140.value0) + "."));
                          return _141;
                      };
                      if (_140 instanceof Data_Maybe.Nothing) {
                          var _144 = Prelude["=="](Data_List.eqList(Prelude.eqInt))((Zipper.current(state.tests)).output)(state.machine.value0.output);
                          if (_144) {
                              var _145 = Utils.fst(Zipper.next(state.tests));
                              if (_145) {
                                  return runTest((function () {
                                      var _146 = {};
                                      for (var _147 in state) {
                                          if (state.hasOwnProperty(_147)) {
                                              _146[_147] = state[_147];
                                          };
                                      };
                                      _146.tests = Utils.snd(Zipper.next(state.tests));
                                      return _146;
                                  })());
                              };
                              if (!_145) {
                                  var _148 = {};
                                  for (var _149 in state) {
                                      if (state.hasOwnProperty(_149)) {
                                          _148[_149] = state[_149];
                                      };
                                  };
                                  _148.state = Done.value;
                                  return _148;
                              };
                              throw new Error("Failed pattern match: " + [ _145.constructor.name ]);
                          };
                          if (!_144) {
                              var _150 = {};
                              for (var _151 in state) {
                                  if (state.hasOwnProperty(_151)) {
                                      _150[_151] = state[_151];
                                  };
                              };
                              _150.state = ShowError.create("Test failed: input was: " + (Prelude.show(Data_List.showList(Prelude.showInt))((Zipper.current(state.tests)).input) + (", expected output was: " + (Prelude.show(Data_List.showList(Prelude.showInt))(Data_List.reverse((Zipper.current(state.tests)).output)) + (". got: " + (Prelude.show(Data_List.showList(Prelude.showInt))(Data_List.reverse(state.machine.value0.output)) + "."))))));
                              return _150;
                          };
                          throw new Error("Failed pattern match: " + [ _144.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ _140.constructor.name ]);
                  };
                  if (!_139) {
                      var _152 = Machine["eval"](state.machine.value0);
                      if (_152 instanceof Data_Either.Left) {
                          var _153 = {};
                          for (var _154 in state) {
                              if (state.hasOwnProperty(_154)) {
                                  _153[_154] = state[_154];
                              };
                          };
                          _153.state = ShowError.create("Run failed: " + (Prelude.show(Machine.showError)(_152.value0) + "."));
                          return _153;
                      };
                      if (_152 instanceof Data_Either.Right) {
                          var _156 = {};
                          for (var _157 in state) {
                              if (state.hasOwnProperty(_157)) {
                                  _156[_157] = state[_157];
                              };
                          };
                          _156.machine = new Data_Maybe.Just(_152.value0);
                          return _156;
                      };
                      throw new Error("Failed pattern match: " + [ _152.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ _139.constructor.name ]);
              };
              throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ state.machine.constructor.name ]);
          };
          if (state.state instanceof RunMachine) {
              if (state.machine instanceof Data_Maybe.Just) {
                  var _161 = Machine.halted(state.machine.value0);
                  if (_161) {
                      var _162 = Machine.hasErrors(state.machine.value0);
                      if (_162 instanceof Data_Maybe.Just) {
                          var _163 = {};
                          for (var _164 in state) {
                              if (state.hasOwnProperty(_164)) {
                                  _163[_164] = state[_164];
                              };
                          };
                          _163.state = ShowError.create("Run failed: " + (Prelude.show(Machine.showError)(_162.value0) + "."));
                          return _163;
                      };
                      if (_162 instanceof Data_Maybe.Nothing) {
                          var _166 = {};
                          for (var _167 in state) {
                              if (state.hasOwnProperty(_167)) {
                                  _166[_167] = state[_167];
                              };
                          };
                          _166.state = ShowOutput.value;
                          _166.outputs = state.machine.value0.output;
                          _166.machine = Data_Maybe.Nothing.value;
                          return _166;
                      };
                      throw new Error("Failed pattern match: " + [ _162.constructor.name ]);
                  };
                  if (!_161) {
                      var _168 = Machine["eval"](state.machine.value0);
                      if (_168 instanceof Data_Either.Left) {
                          var _169 = {};
                          for (var _170 in state) {
                              if (state.hasOwnProperty(_170)) {
                                  _169[_170] = state[_170];
                              };
                          };
                          _169.state = ShowError.create("Run failed: " + (Prelude.show(Machine.showError)(_168.value0) + "."));
                          return _169;
                      };
                      if (_168 instanceof Data_Either.Right) {
                          var _172 = {};
                          for (var _173 in state) {
                              if (state.hasOwnProperty(_173)) {
                                  _172[_173] = state[_173];
                              };
                          };
                          _172.machine = new Data_Maybe.Just(_168.value0);
                          return _172;
                      };
                      throw new Error("Failed pattern match: " + [ _168.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ _161.constructor.name ]);
              };
              if (state.machine instanceof Data_Maybe.Nothing) {
                  return startMachine(input)(state);
              };
              throw new Error("Failed pattern match at SimScreen line 212, column 1 - line 213, column 1: " + [ state.machine.constructor.name ]);
          };
          return state;
      };
  };
  var code = Data_Lens_Lens.lens(function (_6) {
      return _6.code;
  })(function (_7) {
      return function (_8) {
          var _180 = {};
          for (var _181 in _7) {
              if (_7.hasOwnProperty(_181)) {
                  _180[_181] = _7[_181];
              };
          };
          _180.code = _8;
          return _180;
      };
  });
  var updateCode = function (input) {
      return function (state) {
          if (state.state instanceof ShowMachine) {
              var line = state.currLine + (function () {
                  if (input.zeroOne.zero) {
                      return "0";
                  };
                  if (!input.zeroOne.zero) {
                      return "" + (function () {
                          if (input.zeroOne.one) {
                              return "1";
                          };
                          if (!input.zeroOne.one) {
                              return "";
                          };
                          throw new Error("Failed pattern match: " + [ input.zeroOne.one.constructor.name ]);
                      })();
                  };
                  throw new Error("Failed pattern match at SimScreen line 159, column 13 - line 160, column 9: " + [ input.zeroOne.zero.constructor.name ]);
              })();
              var _185 = Data_String.length(line) >= 8;
              if (_185) {
                  return Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(Data_String.take(8)(line)))(Data_Lens_Setter.set(currLine(Data_Profunctor_Strong.strongFn))(Data_String.drop(8)(line))(state));
              };
              if (!_185) {
                  return Data_Lens_Setter.set(currLine(Data_Profunctor_Strong.strongFn))(line)(state);
              };
              throw new Error("Failed pattern match at SimScreen line 155, column 1 - line 156, column 1: " + [ _185.constructor.name ]);
          };
          return state;
      };
  };
  var update = function (i) {
      return function (state) {
          var input = updateMouseInput(i);
          return updateState(input)(resetMachine(input)(updateCode(input)(state)));
      };
  };
  exports["ShowInput"] = ShowInput;
  exports["ShowOutput"] = ShowOutput;
  exports["ShowMachine"] = ShowMachine;
  exports["RunMachine"] = RunMachine;
  exports["TestMachine"] = TestMachine;
  exports["ShowError"] = ShowError;
  exports["Done"] = Done;
  exports["inputs"] = inputs;
  exports["code"] = code;
  exports["currLine"] = currLine;
  exports["currInput"] = currInput;
  exports["splitLine"] = splitLine;
  exports["renderDone"] = renderDone;
  exports["renderError"] = renderError;
  exports["renderInput"] = renderInput;
  exports["renderOutput"] = renderOutput;
  exports["renderMachine"] = renderMachine;
  exports["getPosition"] = getPosition;
  exports["render"] = render;
  exports["updateInput"] = updateInput;
  exports["runTest"] = runTest;
  exports["updateState"] = updateState;
  exports["resetMachine"] = resetMachine;
  exports["startMachine"] = startMachine;
  exports["updateCode"] = updateCode;
  exports["update"] = update;
  exports["updateMouseInput"] = updateMouseInput;
  exports["outButton"] = outButton;
  exports["inButton"] = inButton;
  exports["powerButton"] = powerButton;
  exports["testButton"] = testButton;
  exports["runButton"] = runButton;
  exports["resetButton"] = resetButton;
  exports["oneButton"] = oneButton;
  exports["zeroButton"] = zeroButton;
  exports["done"] = done;
  exports["mkSimScreen"] = mkSimScreen;;
 
})(PS["SimScreen"] = PS["SimScreen"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var Utils = PS["Utils"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var Input = PS["Input"];
  var Screen = PS["Screen"];
  var SimScreen = PS["SimScreen"];     
  var VNScreen = (function () {
      function VNScreen(value0) {
          this.value0 = value0;
      };
      VNScreen.create = function (value0) {
          return new VNScreen(value0);
      };
      return VNScreen;
  })();
  var Simulation = (function () {
      function Simulation(value0) {
          this.value0 = value0;
      };
      Simulation.create = function (value0) {
          return new Simulation(value0);
      };
      return Simulation;
  })();
  var Wait = (function () {
      function Wait(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Wait.create = function (value0) {
          return function (value1) {
              return new Wait(value0, value1);
          };
      };
      return Wait;
  })();
  var Screens = (function () {
      function Screens(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Screens.create = function (value0) {
          return function (value1) {
              return new Screens(value0, value1);
          };
      };
      return Screens;
  })();
  var renderScreens = function (__copy_ctx) {
      return function (__copy__7) {
          var ctx = __copy_ctx;
          var _7 = __copy__7;
          tco: while (true) {
              var ctx_1 = ctx;
              if (_7 instanceof Simulation) {
                  return SimScreen.render(ctx_1)(_7.value0);
              };
              var ctx_1 = ctx;
              if (_7 instanceof VNScreen) {
                  return Screen.renderScreen(ctx_1)(Zipper.current(_7.value0));
              };
              var ctx_1 = ctx;
              if (_7 instanceof Wait) {
                  var __tco__7 = _7.value1;
                  ctx = ctx_1;
                  _7 = __tco__7;
                  continue tco;
              };
              if (_7 instanceof Screens) {
                  var __tco_ctx = ctx;
                  var __tco__7 = _7.value0;
                  ctx = __tco_ctx;
                  _7 = __tco__7;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ ctx.constructor.name, _7.constructor.name ]);
          };
      };
  };
  var mission03_text = "\nGood, Good! This will be come in handy!\n\nNext, we need an automatic countdown machine.\n\nDon't ask want we are going to count down to.\n\nBuild one for us, we'll give you one positive number, you will print all numbers from it until zero (including zero).\n";
  var mission03 = function (comp) {
      return new Screens(VNScreen.create(Screen.screens(comp)(mission03_text)), Simulation.create(SimScreen.mkSimScreen(Zipper.zipper({
          input: new Data_List.Cons(5, Data_List.Nil.value), 
          output: Data_List.range(0)(5)
      })(Data_List.Nil.value)(new Data_List.Cons({
          input: new Data_List.Cons(3, Data_List.Nil.value), 
          output: Data_List.range(0)(3)
      }, Data_List.Nil.value)))(comp)));
  };
  var mission02_text = "\nNice, you have completed the first mission!\n\nThough maybe it's not that impressive, there are only two buttons, how hard can it be?\n\nNext, we need a machine that can add two numbers together.\n\nBuild one for us, we'll give you two numbers, you give us their sum.\n";
  var mission02 = function (comp) {
      return new Screens(VNScreen.create(Screen.screens(comp)(mission02_text)), Simulation.create(SimScreen.mkSimScreen(Zipper.zipper({
          input: Data_List.Cons.create(4)(new Data_List.Cons(5, Data_List.Nil.value)), 
          output: new Data_List.Cons(9, Data_List.Nil.value)
      })(Data_List.Nil.value)(Data_List.Cons.create({
          input: Data_List.Cons.create(3)(new Data_List.Cons(3, Data_List.Nil.value)), 
          output: new Data_List.Cons(6, Data_List.Nil.value)
      })(new Data_List.Cons({
          input: Data_List.Cons.create(-3)(new Data_List.Cons(3, Data_List.Nil.value)), 
          output: new Data_List.Cons(0, Data_List.Nil.value)
      }, Data_List.Nil.value))))(comp)));
  };
  var mission01_text = "\nYour first mission is to make the machine print the number 5.\n\nWe are counting on you!\n";
  var mission01 = function (comp) {
      return new Screens(VNScreen.create(Screen.screens(comp)(mission01_text)), Simulation.create(SimScreen.mkSimScreen(Zipper.zipper({
          input: Data_List.Nil.value, 
          output: new Data_List.Cons(5, Data_List.Nil.value)
      })(Data_List.Nil.value)(Data_List.Nil.value))(comp)));
  };
  var finished = function (_5) {
      if (_5 instanceof VNScreen) {
          return !Utils.fst(Zipper.next(_5.value0));
      };
      if (_5 instanceof Wait) {
          return false;
      };
      if (_5 instanceof Simulation) {
          return SimScreen.done(_5.value0);
      };
      if (_5 instanceof Screens) {
          return finished(_5.value0) && finished(_5.value1);
      };
      throw new Error("Failed pattern match: " + [ _5.constructor.name ]);
  };
  var update = function (input) {
      return function (_6) {
          if (_6 instanceof Screens) {
              var _25 = (input.screenDir > 0.0 || Data_Maybe.isJust(input.mouseClick)) && finished(_6.value0);
              if (_25) {
                  return new Wait(input.time, _6.value1);
              };
              if (!_25) {
                  return new Screens(update(input)(_6.value0), _6.value1);
              };
              throw new Error("Failed pattern match: " + [ _25.constructor.name ]);
          };
          if (_6 instanceof Wait) {
              var _28 = _6.value0 + Signal_Time.second / 5.0 <= input.time;
              if (_28) {
                  return _6.value1;
              };
              if (!_28) {
                  return _6;
              };
              throw new Error("Failed pattern match: " + [ _28.constructor.name ]);
          };
          if (_6 instanceof Simulation) {
              var _31 = input.zeroOne.zero || (input.zeroOne.one || (input.screenDir < 0.0 || (input.screenDir > 0.0 || (Utils.fst(input.io) || (Utils.snd(input.io) || (input.runTests || Data_Maybe.isJust(input.mouseClick)))))));
              if (_31) {
                  return Wait.create(input.time)(Simulation.create(SimScreen.update(input)(_6.value0)));
              };
              if (!_31) {
                  return Simulation.create(SimScreen.update(input)(_6.value0));
              };
              throw new Error("Failed pattern match: " + [ _31.constructor.name ]);
          };
          if (_6 instanceof VNScreen) {
              var _33 = input.zeroOne.zero || (input.zeroOne.one || (input.screenDir < 0.0 || (input.screenDir > 0.0 || (Utils.fst(input.io) || (Utils.snd(input.io) || (input.runTests || Data_Maybe.isJust(input.mouseClick)))))));
              if (_33) {
                  return Wait.create(input.time)((function () {
                      var _34 = input.screenDir > 0.0 || Data_Maybe.isJust(input.mouseClick);
                      if (_34) {
                          return VNScreen.create(Utils.snd(Zipper.next(_6.value0)));
                      };
                      if (!_34) {
                          var _35 = input.screenDir < 0.0;
                          if (_35) {
                              return VNScreen.create(Utils.snd(Zipper.back(_6.value0)));
                          };
                          if (!_35) {
                              return _6;
                          };
                          throw new Error("Failed pattern match: " + [ _35.constructor.name ]);
                      };
                      throw new Error("Failed pattern match: " + [ _34.constructor.name ]);
                  })());
              };
              if (!_33) {
                  return _6;
              };
              throw new Error("Failed pattern match: " + [ _33.constructor.name ]);
          };
          throw new Error("Failed pattern match: " + [ input.constructor.name, _6.constructor.name ]);
      };
  };
  var end_text = "\nYou did it! You completed all of our tasks!\n\nThat's amazing!\n\nWe have no more tasks for you.\n\nTherefore, you are fired.\n\nThank you, and goodbye.\n\nThe End.\n";
  var initialState = Prelude.bind(Control_Monad_Aff.bindAff)(CanvasUtils.loadImageData("assets/compost.png"))(function (_4) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(new Screens(Screens.create(VNScreen.create(Screen.screens(_4)(Screen.intro)))(Screens.create(mission01(_4))(new Screens(mission02(_4), mission03(_4)))), VNScreen.create(Screen.screens(_4)(end_text))));
  });
  var clearCanvas = function (ctx) {
      return function __do() {
          Graphics_Canvas.setFillStyle("#1B1C1B")(ctx)();
          return Graphics_Canvas.fillRect(ctx)({
              x: 0.0, 
              y: 0.0, 
              w: 1024.0, 
              h: 800.0
          })();
      };
  };
  var render = function (context) {
      return function (state) {
          return function __do() {
              clearCanvas(context)();
              renderScreens(context)(state)();
              return Prelude.unit;
          };
      };
  };
  var main = function __do() {
      var _3 = Graphics_Canvas.getCanvasElementById("canvas")();
      if (_3 instanceof Data_Maybe.Just) {
          var _2 = Graphics_Canvas.getContext2D(_3.value0)();
          var _1 = Input.input();
          return Control_Monad_Aff.launchAff(Prelude.bind(Control_Monad_Aff.bindAff)(initialState)(function (_0) {
              var game = Signal.foldp(update)(_0)(_1);
              return Control_Monad_Aff["liftEff'"](Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(_2))(game)));
          }))();
      };
      throw new Error("Failed pattern match at Main line 21, column 1 - line 34, column 1: " + [ _3.constructor.name ]);
  };
  exports["VNScreen"] = VNScreen;
  exports["Simulation"] = Simulation;
  exports["Wait"] = Wait;
  exports["Screens"] = Screens;
  exports["clearCanvas"] = clearCanvas;
  exports["render"] = render;
  exports["renderScreens"] = renderScreens;
  exports["update"] = update;
  exports["end_text"] = end_text;
  exports["mission03_text"] = mission03_text;
  exports["mission03"] = mission03;
  exports["mission02_text"] = mission02_text;
  exports["mission02"] = mission02;
  exports["mission01_text"] = mission01_text;
  exports["mission01"] = mission01;
  exports["initialState"] = initialState;
  exports["finished"] = finished;
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();

}).call(this,require('_process'))
},{"_process":2}],2:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
