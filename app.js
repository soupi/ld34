(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Show = function (show) {
      this.show = show;
  };                                                                           
  var unit = {};
  var showNumber = new Show($foreign.showNumberImpl);
  var show = function (dict) {
      return dict.show;
  };                                                                     
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  };
  exports["Show"] = Show;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["showNumber"] = showNumber;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (b) {
      return function (f) {
          return function (_0) {
              if (_0 instanceof Nothing) {
                  return b;
              };
              if (_0 instanceof Just) {
                  return f(_0.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, _0.constructor.name ]);
          };
      };
  };                                                   
  var isJust = maybe(false)(Prelude["const"](true));
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["isJust"] = isJust;
  exports["maybe"] = maybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Lens_Types = PS["Data.Lens.Types"];     
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Prelude["const"](b));
      };
  };
  exports["set"] = set;
  exports["over"] = over;;
 
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return Prelude[">>>"](Prelude.semigroupoidFn)(a2b)(Prelude[">>>"](Prelude.semigroupoidFn)(b2c)(c2d));
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;;
 
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Traversable

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function Cont (fn) {
      this.fn = fn;
    }

    var emptyList = {};

    var ConsCell = function (head, tail) {
      this.head = head;
      this.tail = tail;
    };

    function consList (x) {
      return function (xs) {
        return new ConsCell(x, xs);
      };
    }

    function listToArray (list) {
      var arr = [];
      while (list !== emptyList) {
        arr.push(list.head);
        list = list.tail;
      }
      return arr;
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            var buildFrom = function (x, ys) {
              return apply(map(consList)(f(x)))(ys);
            };

            var go = function (acc, currentLen, xs) {
              if (currentLen === 0) {
                return acc;
              } else {
                var last = xs[currentLen - 1];
                return new Cont(function () {
                  return go(buildFrom(last, acc), currentLen - 1, xs);
                });
              }
            };

            return function (array) {
              var result = go(pure(emptyList), array.length, array);
              while (result instanceof Cont) {
                result = result.fn();
              }

              return map(listToArray)(result);
            };
          };
        };
      };
    };
  }();
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  };
  var sequenceDefault = function (__dict_Traversable_12) {
      return function (__dict_Applicative_13) {
          return function (tma) {
              return traverse(__dict_Traversable_12)(__dict_Applicative_13)(Prelude.id(Prelude.categoryFn))(tma);
          };
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Prelude.functorArray;
  }, function (__dict_Applicative_15) {
      return sequenceDefault(traversableArray)(__dict_Applicative_15);
  }, function (__dict_Applicative_14) {
      return $foreign.traverseArrayImpl(Prelude.apply(__dict_Applicative_14["__superclass_Prelude.Apply_0"]()))(Prelude.map((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]()))(Prelude.pure(__dict_Applicative_14));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequenceDefault"] = sequenceDefault;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;
  exports["traversableArray"] = traversableArray;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var functorTuple = new Prelude.Functor(function (f) {
      return function (_31) {
          return new Tuple(_31.value0, f(_31.value1));
      };
  });
  exports["Tuple"] = Tuple;
  exports["functorTuple"] = functorTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (_0) {
          return new Data_Tuple.Tuple(a2b(_0.value0), _0.value1);
      };
  }, Prelude["<$>"](Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["second"] = second;
  exports["first"] = first;
  exports["strongFn"] = strongFn;;
 
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var lens$prime = function (to) {
      return function (__dict_Strong_0) {
          return function (pab) {
              return Data_Profunctor.dimap(__dict_Strong_0["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (_0) {
                  return _0.value1(_0.value0);
              })(Data_Profunctor_Strong.first(__dict_Strong_0)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (__dict_Strong_1) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(__dict_Strong_1);
          };
      };
  };
  exports["lens"] = lens;;
 
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  exports["zipWith"] = $foreign.zipWith;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillText"] = $foreign.fillText;
  exports["fillRect"] = $foreign.fillRect;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];                 
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];     
  var y = Data_Lens_Lens.lens(function (_3) {
      return _3.y;
  })(function (_4) {
      return function (_5) {
          var _6 = {};
          for (var _7 in _4) {
              if (_4.hasOwnProperty(_7)) {
                  _6[_7] = _4[_7];
              };
          };
          _6.y = _5;
          return _6;
      };
  });
  var x = Data_Lens_Lens.lens(function (_0) {
      return _0.x;
  })(function (_1) {
      return function (_2) {
          var _8 = {};
          for (var _9 in _1) {
              if (_1.hasOwnProperty(_9)) {
                  _8[_9] = _1[_9];
              };
          };
          _8.x = _2;
          return _8;
      };
  });
  var width = 1024.0;
  var makePoint = function (x_1) {
      return function (y_1) {
          return {
              x: x_1, 
              y: y_1
          };
      };
  };
  var height = 800.0;
  exports["y"] = y;
  exports["x"] = x;
  exports["makePoint"] = makePoint;
  exports["height"] = height;
  exports["width"] = width;;
 
})(PS["Utils"] = PS["Utils"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Utils = PS["Utils"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];     
  var testCollision = function (a) {
      return function (b) {
          var _8 = a.pos.x >= b.pos.x + b.size.x || (a.pos.y >= b.pos.y + b.size.y || (a.pos.x + a.size.x <= b.pos.x || a.pos.y + a.size.y <= b.pos.y));
          if (_8) {
              return false;
          };
          if (!_8) {
              return true;
          };
          throw new Error("Failed pattern match at Collisions line 35, column 1 - line 38, column 1: " + [ _8.constructor.name ]);
      };
  };
  var pos = Data_Lens_Lens.lens(function (_3) {
      return _3.pos;
  })(function (_4) {
      return function (_5) {
          var _9 = {};
          for (var _10 in _4) {
              if (_4.hasOwnProperty(_10)) {
                  _9[_10] = _4[_10];
              };
          };
          _9.pos = _5;
          return _9;
      };
  });
  var cornerRects = function (obj) {
      var size = {
          x: obj.size.x / 2.0, 
          y: obj.size.y / 2.0
      };
      return [ {
          pos: Utils.makePoint(obj.pos.x)(obj.pos.y), 
          size: size
      }, {
          pos: Utils.makePoint(obj.pos.x + obj.size.x / 2.0)(obj.pos.y), 
          size: size
      }, {
          pos: Utils.makePoint(obj.pos.x)(obj.pos.y + obj.size.y / 2.0), 
          size: size
      }, {
          pos: Utils.makePoint(obj.pos.x + obj.size.x / 2.0)(obj.pos.y + obj.size.y / 2.0), 
          size: size
      } ];
  };
  var collision = Data_Lens_Lens.lens(function (_0) {
      return _0.collision;
  })(function (_1) {
      return function (_2) {
          var _11 = {};
          for (var _12 in _1) {
              if (_1.hasOwnProperty(_12)) {
                  _11[_12] = _1[_12];
              };
          };
          _11.collision = _2;
          return _11;
      };
  });
  var addCollisions = function (_6) {
      return function (_7) {
          if (_6 instanceof Data_Maybe.Nothing) {
              return _7;
          };
          if (_7 instanceof Data_Maybe.Nothing) {
              return _6;
          };
          if (_6 instanceof Data_Maybe.Just && _7 instanceof Data_Maybe.Just) {
              var y = (function () {
                  var _15 = _6.value0.y === 0.0;
                  if (_15) {
                      return 0.0;
                  };
                  if (!_15) {
                      var _16 = _6.value0.y === _7.value0.y;
                      if (_16) {
                          return _6.value0.y;
                      };
                      if (!_16) {
                          return _6.value0.y + _7.value0.y;
                      };
                      throw new Error("Failed pattern match: " + [ _16.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Collisions line 90, column 7 - line 91, column 7: " + [ _15.constructor.name ]);
              })();
              var x = (function () {
                  var _17 = _6.value0.x === 0.0;
                  if (_17) {
                      return 0.0;
                  };
                  if (!_17) {
                      var _18 = _6.value0.x === _7.value0.x;
                      if (_18) {
                          return _6.value0.x;
                      };
                      if (!_18) {
                          return _6.value0.x + _7.value0.x;
                      };
                      throw new Error("Failed pattern match: " + [ _18.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Collisions line 86, column 1 - line 87, column 1: " + [ _17.constructor.name ]);
              })();
              return new Data_Maybe.Just({
                  x: x, 
                  y: y
              });
          };
          throw new Error("Failed pattern match at Collisions line 86, column 1 - line 87, column 1: " + [ _6.constructor.name, _7.constructor.name ]);
      };
  };
  var collisionDirection = function (a) {
      return function (b) {
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(addCollisions)(Data_Maybe.Nothing.value)(Data_Array.zipWith(function (result) {
              return function (test) {
                  if (test) {
                      return new Data_Maybe.Just(result);
                  };
                  if (!test) {
                      return Data_Maybe.Nothing.value;
                  };
                  throw new Error("Failed pattern match at Collisions line 77, column 1 - line 80, column 1: " + [ test.constructor.name ]);
              };
          })([ Utils.makePoint(-1.0)(-1.0), Utils.makePoint(1.0)(-1.0), Utils.makePoint(-1.0)(1.0), Utils.makePoint(1.0)(1.0) ])(Prelude.map(Prelude.functorArray)(testCollision(b))(cornerRects(a))));
      };
  };
  var collisionDetection = function (a) {
      return function (b) {
          var _22 = testCollision(a)(b);
          if (_22) {
              return collisionDirection(a)(b);
          };
          if (!_22) {
              return Data_Maybe.Nothing.value;
          };
          throw new Error("Failed pattern match at Collisions line 29, column 1 - line 32, column 1: " + [ _22.constructor.name ]);
      };
  };
  var testCollisionWith = function (objs1) {
      return function (objs2) {
          return Prelude.map(Prelude.functorArray)(function (x) {
              return Data_Lens_Setter.set(collision(Data_Profunctor_Strong.strongFn))(Data_Foldable.foldl(Data_Foldable.foldableArray)(addCollisions)(Data_Maybe.Nothing.value)(Prelude.map(Prelude.functorArray)(collisionDetection(x))(objs2)))(x);
          })(objs1);
      };
  };
  exports["pos"] = pos;
  exports["collision"] = collision;
  exports["addCollisions"] = addCollisions;
  exports["collisionDirection"] = collisionDirection;
  exports["cornerRects"] = cornerRects;
  exports["testCollision"] = testCollision;
  exports["collisionDetection"] = collisionDetection;
  exports["testCollisionWith"] = testCollisionWith;;
 
})(PS["Collisions"] = PS["Collisions"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Utils = PS["Utils"];     
  var upKeyCode = 38;
  var rightKeyCode = 39;
  var leftKeyCode = 37;
  var downKeyCode = 40;
  var arrows = function __do() {
      var _5 = Signal_DOM.keyPressed(leftKeyCode)();
      var _4 = Signal_DOM.keyPressed(rightKeyCode)();
      var _3 = Signal_DOM.keyPressed(upKeyCode)();
      var _2 = Signal_DOM.keyPressed(downKeyCode)();
      return (function () {
          var asNum = function (b) {
              if (b) {
                  return 1.0;
              };
              if (!b) {
                  return 0.0;
              };
              throw new Error("Failed pattern match at Input line 25, column 7 - line 26, column 3: " + [ b.constructor.name ]);
          };
          return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (l) {
              return function (r) {
                  return function (u) {
                      return function (d) {
                          return {
                              x: asNum(r) - asNum(l), 
                              y: asNum(d) - asNum(u)
                          };
                      };
                  };
              };
          })(_5))(_4))(_3))(_2));
      })()();
  };
  var input = function __do() {
      var _1 = Signal_DOM.animationFrame();
      var _0 = arrows();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["const"])(_0))(_1);
  };
  exports["downKeyCode"] = downKeyCode;
  exports["upKeyCode"] = upKeyCode;
  exports["rightKeyCode"] = rightKeyCode;
  exports["leftKeyCode"] = leftKeyCode;
  exports["arrows"] = arrows;
  exports["input"] = input;;
 
})(PS["Input"] = PS["Input"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Utils = PS["Utils"];
  var Collisions = PS["Collisions"];
  var Input = PS["Input"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];     
  var undoCollision = function (rect) {
      if (rect.collision instanceof Data_Maybe.Nothing) {
          return rect;
      };
      if (rect.collision instanceof Data_Maybe.Just) {
          var direction = {
              x: -rect.collision.value0.x, 
              y: -rect.collision.value0.y
          };
          return Data_Lens_Setter.over(function (_18) {
              return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.y(Data_Profunctor_Strong.strongFn)(_18));
          })(function (_4) {
              return _4 + direction.y * rect.speed;
          })(Data_Lens_Setter.over(function (_19) {
              return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.x(Data_Profunctor_Strong.strongFn)(_19));
          })(function (_5) {
              return _5 + direction.x * rect.speed;
          })(rect));
      };
      throw new Error("Failed pattern match at GameObject line 66, column 1 - line 67, column 1: " + [ rect.collision.constructor.name ]);
  };
  var showCol = function (_6) {
      if (_6 instanceof Data_Maybe.Nothing) {
          return "";
      };
      if (_6 instanceof Data_Maybe.Just) {
          return "(" + (Prelude.show(Prelude.showNumber)(_6.value0.x) + ("," + (Prelude.show(Prelude.showNumber)(_6.value0.y) + ")")));
      };
      throw new Error("Failed pattern match at GameObject line 92, column 1 - line 93, column 1: " + [ _6.constructor.name ]);
  };
  var renderObj = function (ctx) {
      return function (state) {
          return function __do() {
              Graphics_Canvas.setFillStyle((function () {
                  var _15 = Data_Maybe.isJust(state.collision);
                  if (_15) {
                      return "#DD0000";
                  };
                  if (!_15) {
                      return state.color;
                  };
                  throw new Error("Failed pattern match at GameObject line 82, column 1 - line 83, column 1: " + [ _15.constructor.name ]);
              })())(ctx)();
              Graphics_Canvas.fillRect(ctx)({
                  x: state.pos.x, 
                  y: state.pos.y, 
                  w: state.size.x, 
                  h: state.size.y
              })();
              Graphics_Canvas.setFillStyle("white")(ctx)();
              Graphics_Canvas.fillText(ctx)(showCol(state.collision))(state.pos.x)(state.pos.y)();
              return Prelude.unit;
          };
      };
  };
  var rect2 = {
      pos: {
          x: Utils.width / 2.0 - 15.0, 
          y: Utils.height / 2.0 - 15.0
      }, 
      size: {
          x: 70.0, 
          y: 70.0
      }, 
      speed: 0.0, 
      collision: Data_Maybe.Nothing.value, 
      color: "#0088DD"
  };
  var rect1 = {
      pos: {
          x: Utils.width / 2.0 - 115.0, 
          y: Utils.height / 2.0 - 15.0
      }, 
      size: {
          x: 50.0, 
          y: 50.0
      }, 
      speed: 5.0, 
      collision: Data_Maybe.Nothing.value, 
      color: "#0088DD"
  };
  var moveObj = function (direction) {
      return function (rect) {
          if (rect.collision instanceof Data_Maybe.Nothing) {
              return Data_Lens_Setter.over(function (_20) {
                  return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.y(Data_Profunctor_Strong.strongFn)(_20));
              })(function (_0) {
                  return _0 + direction.y * rect.speed;
              })(Data_Lens_Setter.over(function (_21) {
                  return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.x(Data_Profunctor_Strong.strongFn)(_21));
              })(function (_1) {
                  return _1 + direction.x * rect.speed;
              })(rect));
          };
          if (rect.collision instanceof Data_Maybe.Just) {
              var direction_1 = {
                  x: -rect.collision.value0.x, 
                  y: -rect.collision.value0.y
              };
              return Data_Lens_Setter.over(function (_22) {
                  return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.y(Data_Profunctor_Strong.strongFn)(_22));
              })(function (_2) {
                  return _2 + direction_1.y * rect.speed;
              })(Data_Lens_Setter.over(function (_23) {
                  return Collisions.pos(Data_Profunctor_Strong.strongFn)(Utils.x(Data_Profunctor_Strong.strongFn)(_23));
              })(function (_3) {
                  return _3 + direction_1.x * rect.speed;
              })(rect));
          };
          throw new Error("Failed pattern match at GameObject line 56, column 1 - line 57, column 1: " + [ rect.collision.constructor.name ]);
      };
  };
  exports["showCol"] = showCol;
  exports["renderObj"] = renderObj;
  exports["undoCollision"] = undoCollision;
  exports["moveObj"] = moveObj;
  exports["rect2"] = rect2;
  exports["rect1"] = rect1;;
 
})(PS["GameObject"] = PS["GameObject"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var Utils = PS["Utils"];
  var GameObject = PS["GameObject"];
  var Collisions = PS["Collisions"];
  var Input = PS["Input"];     
  var undoCollisions = function (state) {
      return {
          objs1: Prelude.map(Prelude.functorArray)(GameObject.undoCollision)(state.objs1), 
          objs2: Prelude.map(Prelude.functorArray)(GameObject.undoCollision)(state.objs2)
      };
  };
  var initialState = {
      objs1: [ GameObject.rect1 ], 
      objs2: [ GameObject.rect2 ]
  };
  var collisionLayers = function (state) {
      return {
          objs1: Collisions.testCollisionWith(state.objs1)(state.objs2), 
          objs2: Collisions.testCollisionWith(state.objs2)(state.objs1)
      };
  };
  var update = function (direction) {
      return function (state) {
          return undoCollisions(collisionLayers((function (state_1) {
              return {
                  objs1: Prelude.map(Prelude.functorArray)(GameObject.moveObj(direction))(state_1.objs1), 
                  objs2: Prelude.map(Prelude.functorArray)(GameObject.moveObj(direction))(state_1.objs2)
              };
          })(collisionLayers(state))));
      };
  };
  var clearCanvas = function (ctx) {
      return function __do() {
          Graphics_Canvas.setFillStyle("#1B1C1B")(ctx)();
          return Graphics_Canvas.fillRect(ctx)({
              x: 0.0, 
              y: 0.0, 
              w: 1024.0, 
              h: 800.0
          })();
      };
  };
  var render = function (context) {
      return function (state) {
          return function __do() {
              clearCanvas(context)();
              Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(GameObject.renderObj(context))(state.objs1)();
              Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(GameObject.renderObj(context))(state.objs2)();
              return Prelude.unit;
          };
      };
  };
  var main = function __do() {
      var _2 = Graphics_Canvas.getCanvasElementById("canvas")();
      if (_2 instanceof Data_Maybe.Just) {
          var _1 = Graphics_Canvas.getContext2D(_2.value0)();
          var _0 = Input.input();
          return (function () {
              var game = Signal.foldp(update)(initialState)(_0);
              return Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(_1))(game));
          })()();
      };
      throw new Error("Failed pattern match at Main line 23, column 1 - line 34, column 1: " + [ _2.constructor.name ]);
  };
  exports["clearCanvas"] = clearCanvas;
  exports["render"] = render;
  exports["undoCollisions"] = undoCollisions;
  exports["collisionLayers"] = collisionLayers;
  exports["update"] = update;
  exports["initialState"] = initialState;
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();

}).call(this,require('_process'))
},{"_process":2}],2:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
