(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
// Generated by psc-bundle 0.7.6.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  //- ModuloSemiring -------------------------------------------------------------

  exports.intDiv = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x / y | 0;
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      return x % y;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var ModuloSemiring = function (__superclass_Prelude$dotSemiring_0, div, mod) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.div = div;
      this.mod = mod;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });                 
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  }; 
  var moduloSemiringInt = new ModuloSemiring(function () {
      return semiringInt;
  }, $foreign.intDiv, $foreign.intMod);
  var mod = function (dict) {
      return dict.mod;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqString = new Eq($foreign.refEq);
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (__dict_Eq_7) {
      return eq(__dict_Eq_7);
  }; 
  var div = function (dict) {
      return dict.div;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $bar$bar = function (__dict_BooleanAlgebra_11) {
      return disj(__dict_BooleanAlgebra_11);
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var $amp$amp = function (__dict_BooleanAlgebra_13) {
      return conj(__dict_BooleanAlgebra_13);
  };
  var compose = function (dict) {
      return dict.compose;
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  }; 
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (__dict_Eq_9) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(__dict_Eq_9)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  }; 
  var add = function (dict) {
      return dict.add;
  };
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Eq"] = Eq;
  exports["ModuloSemiring"] = ModuloSemiring;
  exports["Semiring"] = Semiring;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Semigroupoid"] = Semigroupoid;
  exports["||"] = $bar$bar;
  exports["&&"] = $amp$amp;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["/="] = $div$eq;
  exports["eq"] = eq;
  exports["mod"] = mod;
  exports["div"] = div;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["<*>"] = $less$times$greater;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports[">>>"] = $greater$greater$greater;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["functorArray"] = functorArray;
  exports["semiringInt"] = semiringInt;
  exports["moduloSemiringInt"] = moduloSemiringInt;
  exports["eqBoolean"] = eqBoolean;
  exports["eqString"] = eqString;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return Prelude[">>>"](Prelude.semigroupoidFn)(a2b)(Prelude[">>>"](Prelude.semigroupoidFn)(b2c)(c2d));
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;;
 
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                             
  var functorMaybe = new Prelude.Functor(function (fn) {
      return function (_2) {
          if (_2 instanceof Just) {
              return new Just(fn(_2.value0));
          };
          return Nothing.value;
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (__dict_Foldable_26) {
      return function (__dict_Monoid_27) {
          return function (f) {
              return function (xs) {
                  return foldr(__dict_Foldable_26)(function (x) {
                      return function (acc) {
                          return Prelude["<>"](__dict_Monoid_27["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(__dict_Monoid_27))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (__dict_Monoid_28) {
      return foldMapDefaultR(foldableArray)(__dict_Monoid_28);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
      this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["sequence"] = sequence;
  exports["traverse"] = traverse;;
 
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var functorTuple = new Prelude.Functor(function (f) {
      return function (_31) {
          return new Tuple(_31.value0, f(_31.value1));
      };
  });
  exports["Tuple"] = Tuple;
  exports["functorTuple"] = functorTuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];     
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (_0) {
          return new Data_Tuple.Tuple(a2b(_0.value0), _0.value1);
      };
  }, Prelude["<$>"](Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["second"] = second;
  exports["first"] = first;
  exports["strongFn"] = strongFn;;
 
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Lens_Internal_Shop = PS["Data.Lens.Internal.Shop"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var lens$prime = function (to) {
      return function (__dict_Strong_0) {
          return function (pab) {
              return Data_Profunctor.dimap(__dict_Strong_0["__superclass_Data.Profunctor.Profunctor_0"]())(to)(function (_0) {
                  return _0.value1(_0.value0);
              })(Data_Profunctor_Strong.first(__dict_Strong_0)(pab));
          };
      };
  };
  var lens = function (get) {
      return function (set) {
          return function (__dict_Strong_1) {
              return lens$prime(function (s) {
                  return new Data_Tuple.Tuple(get(s), function (b) {
                      return set(s)(b);
                  });
              })(__dict_Strong_1);
          };
      };
  };
  exports["lens"] = lens;;
 
})(PS["Data.Lens.Lens"] = PS["Data.Lens.Lens"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  exports["filter"] = $foreign.filter;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.withImage = function (src) {
    return function(f) {
          return function () {
              var img = new Image();
              img.src = src;
              img.addEventListener("load", function() {
                  f(img)();
              }, false);

              return {};
          }
      };
  };

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["drawImage"] = $foreign.drawImage;
  exports["withImage"] = $foreign.withImage;
  exports["fillText"] = $foreign.fillText;
  exports["fillRect"] = $foreign.fillRect;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports._unsafeInterleaveAff = function (aff) {
    return aff;
  }

  exports._makeAff = function (cb) {
    return function(success, error) {
      return cb(function(e) {
        return function() {
          error(e);
        };
      })(function(v) {
        return function() {
          try {
            success(v);
          } catch (e) {
            error(e);
          }
        };
      })();
    }
  }

  exports._pure = function (nonCanceler, v) {
    return function(success, error) {
      try {
        success(v);
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }

  exports._fmap = function (f, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(f(v));
        } catch (e) {
          error(e);
        }
      }, error);
    };
  }

  exports._bind = function (alwaysCanceler, aff, f) {
    return function(success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function(){};

      canceler1 = aff(function(v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function(e) {
        return function(s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function(bool) {
              if (bool || isCanceled) {
                try {
                  s(true);
                } catch (e) {
                  f(e);
                }
              } else {
                onCanceler = function(canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  }

  exports._attempt = function (Left, Right, aff) {
    return function(success, error) {
      return aff(function(v) {
        try {
          success(Right(v));
        } catch (e) {
          error(e);
        }
      }, function(e) {
        try {
          success(Left(e));
        } catch (e) {
          error(e);
        }
      });
    };
  }

  exports._runAff = function (errorT, successT, aff) {
    return function() {
      return aff(function(v) {
        try {
          successT(v)();
        } catch (e) {
          errorT(e)();
        }
      }, function(e) {
        errorT(e)();
      });
    };
  }

  exports._liftEff = function (nonCanceler, e) {
    return function(success, error) {
      try {
        success(e());
      } catch (e) {
        error(e);
      }

      return nonCanceler;
    };
  }
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["throwException"] = $foreign.throwException;;
 
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  exports["Left"] = Left;
  exports["Right"] = Right;;
 
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var launchAff = function (_17) {
      return runAff(Control_Monad_Eff_Exception.throwException)(Prelude["const"](Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit)))($foreign._unsafeInterleaveAff(_17));
  };
  var functorAff = new Prelude.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Prelude.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Prelude["<$>"](functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Prelude.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Prelude["const"](Prelude.pure(applicativeAff)(false));
  var alwaysCanceler = Prelude["const"](Prelude.pure(applicativeAff)(true));
  var liftEff$prime = function (eff) {
      return attempt($foreign._unsafeInterleaveAff($foreign._liftEff(nonCanceler, eff)));
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["const"](nonCanceler))(h(e)(a));
          };
      });
  };                                                       
  var bindAff = new Prelude.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  exports["runAff"] = runAff;
  exports["nonCanceler"] = nonCanceler;
  exports["makeAff"] = makeAff;
  exports["liftEff'"] = liftEff$prime;
  exports["launchAff"] = launchAff;
  exports["attempt"] = attempt;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;;
 
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];     
  var y = Data_Lens_Lens.lens(function (_3) {
      return _3.y;
  })(function (_4) {
      return function (_5) {
          var _6 = {};
          for (var _7 in _4) {
              if (_4.hasOwnProperty(_7)) {
                  _6[_7] = _4[_7];
              };
          };
          _6.y = _5;
          return _6;
      };
  });
  var x = Data_Lens_Lens.lens(function (_0) {
      return _0.x;
  })(function (_1) {
      return function (_2) {
          var _8 = {};
          for (var _9 in _1) {
              if (_1.hasOwnProperty(_9)) {
                  _8[_9] = _1[_9];
              };
          };
          _8.x = _2;
          return _8;
      };
  });
  var width = 1024.0;
  var pointInRect = function (p) {
      return function (obj) {
          return obj.pos.x <= p.x && p.x <= obj.pos.x + obj.size.x && (obj.pos.y <= p.y && p.y <= obj.pos.y + obj.size.y);
      };
  };
  var loadImageData = function (src) {
      return Control_Monad_Aff.makeAff(function (error) {
          return function (success) {
              return Graphics_Canvas.withImage(src)(success);
          };
      });
  };
  var height = 800.0;
  exports["y"] = y;
  exports["x"] = x;
  exports["pointInRect"] = pointInRect;
  exports["loadImageData"] = loadImageData;
  exports["height"] = height;
  exports["width"] = width;;
 
})(PS["CanvasUtils"] = PS["CanvasUtils"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Lens_Types = PS["Data.Lens.Types"];     
  var over = function (l) {
      return l;
  };
  var set = function (l) {
      return function (b) {
          return over(l)(Prelude["const"](b));
      };
  };
  exports["set"] = set;
  exports["over"] = over;;
 
})(PS["Data.Lens.Setter"] = PS["Data.Lens.Setter"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];     
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var toList = function (__dict_Foldable_2) {
      return Data_Foldable.foldr(__dict_Foldable_2)(Cons.create)(Nil.value);
  };
  var singleton = function (a) {
      return new Cons(a, Nil.value);
  }; 
  var reverse = (function () {
      var go = function (__copy_acc) {
          return function (__copy__41) {
              var acc = __copy_acc;
              var _41 = __copy__41;
              tco: while (true) {
                  var acc_1 = acc;
                  if (_41 instanceof Nil) {
                      return acc_1;
                  };
                  if (_41 instanceof Cons) {
                      var __tco_acc = new Cons(_41.value0, acc);
                      var __tco__41 = _41.value1;
                      acc = __tco_acc;
                      _41 = __tco__41;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List line 365, column 1 - line 366, column 1: " + [ acc.constructor.name, _41.constructor.name ]);
              };
          };
      };
      return go(Nil.value);
  })();
  var zipWith = function (f) {
      return function (xs) {
          return function (ys) {
              var go = function (__copy__55) {
                  return function (__copy__56) {
                      return function (__copy_acc) {
                          var _55 = __copy__55;
                          var _56 = __copy__56;
                          var acc = __copy_acc;
                          tco: while (true) {
                              if (_55 instanceof Nil) {
                                  return acc;
                              };
                              if (_56 instanceof Nil) {
                                  return acc;
                              };
                              if (_55 instanceof Cons && _56 instanceof Cons) {
                                  var __tco__55 = _55.value1;
                                  var __tco__56 = _56.value1;
                                  var __tco_acc = new Cons(f(_55.value0)(_56.value0), acc);
                                  _55 = __tco__55;
                                  _56 = __tco__56;
                                  acc = __tco_acc;
                                  continue tco;
                              };
                              throw new Error("Failed pattern match at Data.List line 651, column 1 - line 652, column 1: " + [ _55.constructor.name, _56.constructor.name, acc.constructor.name ]);
                          };
                      };
                  };
              };
              return reverse(go(xs)(ys)(Nil.value));
          };
      };
  };
  var range = function (start) {
      return function (end) {
          if (start === end) {
              return singleton(start);
          };
          if (Prelude.otherwise) {
              var go = function (__copy_s) {
                  return function (__copy_e) {
                      return function (__copy_step) {
                          return function (__copy_rest) {
                              var s = __copy_s;
                              var e = __copy_e;
                              var step = __copy_step;
                              var rest = __copy_rest;
                              tco: while (true) {
                                  if (s === e) {
                                      return new Cons(s, rest);
                                  };
                                  if (Prelude.otherwise) {
                                      var __tco_s = s + step | 0;
                                      var __tco_e = e;
                                      var __tco_step = step;
                                      var __tco_rest = new Cons(s, rest);
                                      s = __tco_s;
                                      e = __tco_e;
                                      step = __tco_step;
                                      rest = __tco_rest;
                                      continue tco;
                                  };
                                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, rest.constructor.name ]);
                              };
                          };
                      };
                  };
              };
              return go(end)(start)((function () {
                  var _163 = start > end;
                  if (_163) {
                      return 1;
                  };
                  if (!_163) {
                      return -1;
                  };
                  throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ _163.constructor.name ]);
              })())(Nil.value);
          };
          throw new Error("Failed pattern match at Data.List line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
      };
  };
  var functorList = new Prelude.Functor(function (f) {
      return function (lst) {
          var go = function (__copy__64) {
              return function (__copy_acc) {
                  var _64 = __copy__64;
                  var acc = __copy_acc;
                  tco: while (true) {
                      if (_64 instanceof Nil) {
                          return acc;
                      };
                      if (_64 instanceof Cons) {
                          var __tco__64 = _64.value1;
                          var __tco_acc = new Cons(f(_64.value0), acc);
                          _64 = __tco__64;
                          acc = __tco_acc;
                          continue tco;
                      };
                      throw new Error("Failed pattern match at Data.List line 718, column 1 - line 725, column 1: " + [ _64.constructor.name, acc.constructor.name ]);
                  };
              };
          };
          return reverse(go(lst)(Nil.value));
      };
  });
  var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function (_319) {
                  return Prelude.append(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(acc)(f(_319));
              };
          })(Data_Monoid.mempty(__dict_Monoid_16));
      };
  }, (function () {
      var go = function (__copy_o) {
          return function (__copy_b) {
              return function (__copy__66) {
                  var o = __copy_o;
                  var b = __copy_b;
                  var _66 = __copy__66;
                  tco: while (true) {
                      var b_1 = b;
                      if (_66 instanceof Nil) {
                          return b_1;
                      };
                      if (_66 instanceof Cons) {
                          var __tco_o = o;
                          var __tco_b = o(b)(_66.value0);
                          var __tco__66 = _66.value1;
                          o = __tco_o;
                          b = __tco_b;
                          _66 = __tco__66;
                          continue tco;
                      };
                      throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _66.constructor.name ]);
                  };
              };
          };
      };
      return go;
  })(), function (o) {
      return function (b) {
          return function (_65) {
              if (_65 instanceof Nil) {
                  return b;
              };
              if (_65 instanceof Cons) {
                  return o(_65.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_65.value1));
              };
              throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _65.constructor.name ]);
          };
      };
  });   
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (__dict_Applicative_1) {
      return function (_69) {
          if (_69 instanceof Nil) {
              return Prelude.pure(__dict_Applicative_1)(Nil.value);
          };
          if (_69 instanceof Cons) {
              return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_69.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_1)(_69.value1));
          };
          throw new Error("Failed pattern match: " + [ _69.constructor.name ]);
      };
  }, function (__dict_Applicative_0) {
      return function (f) {
          return function (_68) {
              if (_68 instanceof Nil) {
                  return Prelude.pure(__dict_Applicative_0)(Nil.value);
              };
              if (_68 instanceof Cons) {
                  return Prelude["<*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_68.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_0)(f)(_68.value1));
              };
              throw new Error("Failed pattern match: " + [ f.constructor.name, _68.constructor.name ]);
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["zipWith"] = zipWith;
  exports["reverse"] = reverse;
  exports["range"] = range;
  exports["singleton"] = singleton;
  exports["toList"] = toList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;;
 
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substr(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var Data_Char = PS["Data.Char"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  exports["split"] = $foreign.split;
  exports["drop"] = $foreign.drop;
  exports["take"] = $foreign.take;
  exports["length"] = $foreign.length;;
 
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // module Signal

  exports.constant =
    function constant(initial) {
      var subs = [];
      var val = initial;
      var sig = {
        subscribe: function(sub) {
          subs.push(sub);
          sub(val);
        },
        get: function() { return val; },
        set: function(newval) {
          val = newval;
          subs.forEach(function(sub) { sub(newval); });
        }
      };
      return sig;
    };

  exports.mapSigP =
    function mapSigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun(sig.get()));
          sig.subscribe(function(val) { out.set(fun(val)); });
          return out;
        };
      };
    };


  exports.applySigP =
    function applySigP(constant) {
      return function(fun) {
        return function(sig) {
          var out = constant(fun.get()(sig.get()));
          var produce = function() { out.set(fun.get()(sig.get())); };
          fun.subscribe(produce);
          sig.subscribe(produce);
          return out;
        };
      };
    };

  exports.foldpP =
    function foldpP(constant) {
      return function(fun) {
        return function(seed) {
          return function(sig) {
            var acc = seed;
            var out = constant(acc);
            sig.subscribe(function(val) {
              acc = fun(val)(acc);
              out.set(acc);
            });
            return out;
          };
        };
      };
    };

  exports.sampleOnP =
    function sampleOnP(constant) {
      return function(sig1) {
        return function(sig2) {
          var out = constant(sig2.get());
          sig1.subscribe(function() {
            out.set(sig2.get());
          });
          return out;
        };
      };
    };

  exports.dropRepeatsP =
  function dropRepeatsP(eq) {
    return function(constant) {
      return function(sig) {
        var val = sig.get();
        var out = constant(val);
        sig.subscribe(function(newval) {
          if (!eq["eq"](val)(newval)) {
            val = newval;
            out.set(val);
          }
        });
        return out;
      };
    };
  };  

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];               
  var sampleOn = $foreign.sampleOnP($foreign.constant);
  var mapSig = $foreign.mapSigP($foreign.constant);
  var functorSignal = new Prelude.Functor(mapSig);
  var foldp = $foreign.foldpP($foreign.constant);                     
  var dropRepeats = function (__dict_Eq_5) {
      return $foreign.dropRepeatsP(__dict_Eq_5)($foreign.constant);
  };
  var applySig = $foreign.applySigP($foreign.constant);
  var applySignal = new Prelude.Apply(function () {
      return functorSignal;
  }, applySig);
  exports["dropRepeats"] = dropRepeats;
  exports["sampleOn"] = sampleOn;
  exports["foldp"] = foldp;
  exports["functorSignal"] = functorSignal;
  exports["applySignal"] = applySignal;
  exports["runSignal"] = $foreign.runSignal;
  exports["constant"] = $foreign.constant;;
 
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;

  exports.everyP = function everyP(constant) {
    return function(t) {
      var out = constant(now());
      setInterval(function() {
        out.set(now());
      }, t);
      return out;
    };
  };

  exports.sinceP = function sinceP(constant) {
    return function(t) {
      return function(sig) {
        var out = constant(false);
        var first = true;
        var timer = undefined;
        var tick = function() {
          out.set(false);
          timer = undefined;
        };
        sig.subscribe(function() {
          if (first) {
            first = false;
            return;
          }
          if (timer === undefined) {
            out.set(true);
            timer = setTimeout(tick, t);
          } else {
            clearTimeout(timer);
            timer = setTimeout(tick, t);
          }
        });
        return out;
      }
    };
  };
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var Signal = PS["Signal"];     
  var since = $foreign.sinceP(Signal.constant);
  var second = 1000.0;
  var millisecond = 1.0;
  var every = $foreign.everyP(Signal.constant);
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["since"] = since;
  exports["every"] = every;
  exports["now"] = $foreign.now;;
 
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mouseButtonP =
    function mouseButtonP(constant) {
      return function(button) {
        return function() {
          var out = constant(false);
          window.addEventListener("mousedown", function(e) {
            if (e.button === button) out.set(true);
          });
          window.addEventListener("mouseup", function(e) {
            if (e.button === button) out.set(false);
          });
          return out;
        };
      };
    };

  exports.mousePosP =
    function mousePosP(constant) {
      var out = constant({x:0,y:0});
      window.addEventListener('mousemove', function(e) {
        if (e.pageX !== undefined && e.pageY !== undefined) {
          out.set({x: e.pageX, y: e.pageY});
        } else if (e.clientX !== undefined && e.clientY !== undefined) {
          out.set({
            x: e.clientX + document.body.scrollLeft +
               document.documentElement.scrollLeft,
            y: e.clientY + document.body.scrollTop +
               document.documentElement.scrollTop
          });
        } else {
          throw new Error('Mouse event has no coordinates I recognise!');
        }
      });
      return function() {
        return out;
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };

  exports.windowDimensionsP = function windowDimensionsP(constant) {
    var out = constant({ w: window.innerWidth, h: innerHeight });
    window.addEventListener("resize", function() {
      out.set({ w: window.innerWidth, h: window.innerHeight });
    });
    return function() {
      return out;
    }
  }
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Timer = PS["Control.Timer"];
  var DOM = PS["DOM"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];     
  var windowDimensions = $foreign.windowDimensionsP(Signal.constant);
  var mousePos = $foreign.mousePosP(Signal.constant);
  var mouseButton = $foreign.mouseButtonP(Signal.constant);
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["windowDimensions"] = windowDimensions;
  exports["mousePos"] = mousePos;
  exports["mouseButton"] = mouseButton;
  exports["keyPressed"] = keyPressed;
  exports["animationFrame"] = animationFrame;;
 
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var Signal_DOM = PS["Signal.DOM"];
  var CanvasUtils = PS["CanvasUtils"];     
  var zeroOne = Data_Lens_Lens.lens(function (_0) {
      return _0.zeroOne;
  })(function (_1) {
      return function (_2) {
          var _28 = {};
          for (var _29 in _1) {
              if (_1.hasOwnProperty(_29)) {
                  _28[_29] = _1[_29];
              };
          };
          _28.zeroOne = _2;
          return _28;
      };
  });
  var zero$prime = function __do() {
      var _23 = Signal_DOM.keyPressed(48)();
      var _22 = Signal_DOM.keyPressed(96)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["||"](Prelude.booleanAlgebraBoolean))(_23))(_22);
  };
  var zero = Data_Lens_Lens.lens(function (_3) {
      return _3.zero;
  })(function (_4) {
      return function (_5) {
          var _32 = {};
          for (var _33 in _4) {
              if (_4.hasOwnProperty(_33)) {
                  _32[_33] = _4[_33];
              };
          };
          _32.zero = _5;
          return _32;
      };
  });
  var upKeyCode = 38;
  var rightKeyCode = 39;
  var one$prime = function __do() {
      var _25 = Signal_DOM.keyPressed(49)();
      var _24 = Signal_DOM.keyPressed(97)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["||"](Prelude.booleanAlgebraBoolean))(_25))(_24);
  };
  var one = Data_Lens_Lens.lens(function (_6) {
      return _6.one;
  })(function (_7) {
      return function (_8) {
          var _36 = {};
          for (var _37 in _7) {
              if (_7.hasOwnProperty(_37)) {
                  _36[_37] = _7[_37];
              };
          };
          _36.one = _8;
          return _36;
      };
  });
  var once = function (sig) {
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(Prelude["&&"](Prelude.booleanAlgebraBoolean))(sig))(Signal_Time.since(Signal_Time.millisecond * 10.0)(Signal.dropRepeats(Prelude.eqBoolean)(sig)));
  };
  var mouseClick = function __do() {
      var _27 = Signal_DOM.mousePos();
      var _26 = Signal_DOM.mouseButton(0)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (p) {
          return function (d) {
              if (d) {
                  return new Data_Maybe.Just({
                      x: Data_Int.toNumber(p.x), 
                      y: Data_Int.toNumber(p.y)
                  });
              };
              if (!d) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Input line 102, column 1 - line 110, column 1: " + [ d.constructor.name ]);
          };
      })(_27))(once(_26));
  };
  var leftKeyCode = 37;
  var enterKeyCode = 13;
  var downKeyCode = 40;
  var buildInput = function (t) {
      return function (a) {
          return function (sdir) {
              return function (z) {
                  return function (o) {
                      return function (m) {
                          return function (winDim) {
                              return {
                                  arrows: a, 
                                  time: t, 
                                  screenDir: sdir, 
                                  zeroOne: {
                                      zero: z, 
                                      one: o
                                  }, 
                                  mouseClick: Prelude.map(Data_Maybe.functorMaybe)(function (p) {
                                      return {
                                          x: p.x - (Data_Int.toNumber(winDim.w) - CanvasUtils.width) / 2.0, 
                                          y: p.y - 5.0
                                      };
                                  })(m)
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var backspaceKeyCode = 8;
  var asNum = function (b) {
      if (b) {
          return 1.0;
      };
      if (!b) {
          return 0.0;
      };
      throw new Error("Failed pattern match at Input line 82, column 1 - line 84, column 1: " + [ b.constructor.name ]);
  };
  var screenDirection = function __do() {
      var _21 = Signal_DOM.keyPressed(enterKeyCode)();
      var _20 = Signal_DOM.keyPressed(backspaceKeyCode)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (f) {
          return function (b) {
              return asNum(f) - asNum(b);
          };
      })(once(_21)))(once(_20));
  };
  var arrows = function __do() {
      var _19 = Signal_DOM.keyPressed(leftKeyCode)();
      var _18 = Signal_DOM.keyPressed(rightKeyCode)();
      var _17 = Signal_DOM.keyPressed(upKeyCode)();
      var _16 = Signal_DOM.keyPressed(downKeyCode)();
      return Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(function (l) {
          return function (r) {
              return function (u) {
                  return function (d) {
                      return {
                          x: asNum(r) - asNum(l), 
                          y: asNum(d) - asNum(u)
                      };
                  };
              };
          };
      })(_19))(_18))(_17))(_16);
  };
  var input = function __do() {
      var _15 = Signal_DOM.animationFrame();
      return (function () {
          var time = Signal_Time.every(Signal_Time.millisecond * 17.0);
          return function __do() {
              var _14 = arrows();
              var _13 = screenDirection();
              var _12 = zero$prime();
              var _11 = one$prime();
              var _10 = mouseClick();
              var _9 = Signal_DOM.windowDimensions();
              return Signal.sampleOn(_15)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<*>"](Signal.applySignal)(Prelude["<$>"](Signal.functorSignal)(buildInput)(time))(_14))(_13))(once(_12)))(once(_11)))(_10))(_9));
          };
      })()();
  };
  exports["one"] = one;
  exports["zero"] = zero;
  exports["zeroOne"] = zeroOne;
  exports["once"] = once;
  exports["mouseClick"] = mouseClick;
  exports["asNum"] = asNum;
  exports["screenDirection"] = screenDirection;
  exports["backspaceKeyCode"] = backspaceKeyCode;
  exports["enterKeyCode"] = enterKeyCode;
  exports["downKeyCode"] = downKeyCode;
  exports["upKeyCode"] = upKeyCode;
  exports["rightKeyCode"] = rightKeyCode;
  exports["leftKeyCode"] = leftKeyCode;
  exports["arrows"] = arrows;
  exports["buildInput"] = buildInput;
  exports["input"] = input;;
 
})(PS["Input"] = PS["Input"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (_1) {
      return _1.value1;
  };
  var fst = function (_0) {
      return _0.value0;
  };
  exports["Tuple"] = Tuple;
  exports["snd"] = snd;
  exports["fst"] = fst;;
 
})(PS["Utils"] = PS["Utils"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_List = PS["Data.List"];
  var Utils = PS["Utils"];     
  var Zipper = (function () {
      function Zipper(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Zipper.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Zipper(value0, value1, value2);
              };
          };
      };
      return Zipper;
  })();
  var zipper = Zipper.create;
  var next = function (_1) {
      if (_1.value2 instanceof Data_List.Nil) {
          return new Utils.Tuple(false, _1);
      };
      if (_1.value2 instanceof Data_List.Cons) {
          return Utils.Tuple.create(true)(new Zipper(_1.value2.value0, new Data_List.Cons(_1.value0, _1.value1), _1.value2.value1));
      };
      throw new Error("Failed pattern match at Zipper line 17, column 1 - line 18, column 1: " + [ _1.value2.constructor.name ]);
  };
  var current = function (_0) {
      return _0.value0;
  };
  var back = function (_2) {
      if (_2.value1 instanceof Data_List.Nil) {
          return new Utils.Tuple(false, _2);
      };
      if (_2.value1 instanceof Data_List.Cons) {
          return Utils.Tuple.create(true)(new Zipper(_2.value1.value0, _2.value1.value1, new Data_List.Cons(_2.value0, _2.value2)));
      };
      throw new Error("Failed pattern match at Zipper line 25, column 1 - line 26, column 1: " + [ _2.value1.constructor.name ]);
  };
  exports["Zipper"] = Zipper;
  exports["back"] = back;
  exports["next"] = next;
  exports["current"] = current;
  exports["zipper"] = zipper;;
 
})(PS["Zipper"] = PS["Zipper"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Array = PS["Data.Array"];
  var Data_Maybe = PS["Data.Maybe"];
  var $$Math = PS["Math"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Traversable = PS["Data.Traversable"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var CanvasUtils = PS["CanvasUtils"];
  var Input = PS["Input"];     
  var ShowAll = (function () {
      function ShowAll() {

      };
      ShowAll.value = new ShowAll();
      return ShowAll;
  })();
  var size = {
      x: CanvasUtils.width - 40.0, 
      y: 200.0
  };
  var render = function (ctx) {
      return function (bar) {
          return function __do() {
              (function () {
                  if (bar.state instanceof ShowAll) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle(bar.bgcolor)(ctx)();
                          Graphics_Canvas.fillRect(ctx)({
                              x: bar.pos.x, 
                              y: bar.pos.y, 
                              w: bar.size.x, 
                              h: bar.size.y
                          })();
                          Graphics_Canvas.setFillStyle(bar.color)(ctx)();
                          Graphics_Canvas.fillText(ctx)(bar.text)(bar.pos.x + 20.0)(bar.pos.y + 20.0)();
                          return Prelude.unit;
                      };
                  };
                  return Prelude.pure(Control_Monad_Eff.applicativeEff)(Prelude.unit);
              })()();
              return Prelude.unit;
          };
      };
  };
  var position = {
      x: 20.0, 
      y: CanvasUtils.height - 250.0
  };
  var mkText = function (str) {
      return {
          pos: position, 
          size: size, 
          speed: 1.0, 
          bgcolor: "#2B2C2B", 
          color: "white", 
          text: str, 
          state: ShowAll.value
      };
  };
  exports["ShowAll"] = ShowAll;
  exports["render"] = render;
  exports["mkText"] = mkText;
  exports["size"] = size;
  exports["position"] = position;;
 
})(PS["TextBar"] = PS["TextBar"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Array = PS["Data.Array"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var TextBar = PS["TextBar"];
  var Data_Foldable = PS["Data.Foldable"];     
  var scrErr = {
      textbar: TextBar.mkText("No screens available"), 
      gfx: Data_Maybe.Nothing.value
  };
  var renderScreen = function (context) {
      return function (screen) {
          return function __do() {
              (function () {
                  if (screen.gfx instanceof Data_Maybe.Just) {
                      return function __do() {
                          Graphics_Canvas.drawImage(context)(screen.gfx.value0)(0.0)(0.0)();
                          return Prelude.unit;
                      };
                  };
                  if (screen.gfx instanceof Data_Maybe.Nothing) {
                      return function __do() {
                          Graphics_Canvas.setFillStyle("#900")(context)();
                          Graphics_Canvas.fillRect(context)({
                              x: 0.0, 
                              y: 100.0, 
                              w: CanvasUtils.width, 
                              h: CanvasUtils.height - 200.0
                          })();
                          return Prelude.unit;
                      };
                  };
                  throw new Error("Failed pattern match at Screen line 76, column 1 - line 77, column 1: " + [ screen.gfx.constructor.name ]);
              })()();
              TextBar.render(context)(screen.textbar)();
              return Prelude.unit;
          };
      };
  };
  var mkScreen = function (img) {
      return function (t) {
          return {
              textbar: t, 
              gfx: new Data_Maybe.Just(img)
          };
      };
  };
  var scrArr = function (img) {
      return function (txts) {
          return Prelude.map(Prelude.functorArray)(function (_6) {
              return mkScreen(img)(TextBar.mkText(_6));
          })(Data_Array.filter(function (_0) {
              return Prelude["/="](Prelude.eqString)(_0)("");
          })(Data_String.split("\n\n")(txts)));
      };
  };
  var screens = function (img) {
      return function (txts) {
          var _3 = Data_List.toList(Data_Foldable.foldableArray)(scrArr(img)(txts));
          if (_3 instanceof Data_List.Nil) {
              return Zipper.zipper(scrErr)(Data_List.Nil.value)(Data_List.Nil.value);
          };
          if (_3 instanceof Data_List.Cons) {
              return Zipper.zipper(_3.value0)(Data_List.Nil.value)(_3.value1);
          };
          throw new Error("Failed pattern match at Screen line 39, column 1 - line 40, column 1: " + [ _3.constructor.name ]);
      };
  };
  var intro = "Welcome to <Company>.\n\nFor the past 20 our scientists and engineers have been working on a top secret project.\n\nAt last, they have succeeded in creating a marvelous machine, a computing machine.\n\nWe call it 'The Computing Machine'.\n\nYou had the fortune to be selected as one of the chosen few to operate The Computing Machine.\n\nAt <Company>, we have a lot of challenges waiting to be solved.\n\nFortunately for you, The Computing Machine is really simple to operate, it only has two buttons!\n\nAll you have to do is insert the right combination of the two buttons, and The Computing Machine will do the rest!\n\nGood Luck!";
  exports["renderScreen"] = renderScreen;
  exports["intro"] = intro;
  exports["scrArr"] = scrArr;
  exports["screens"] = screens;
  exports["scrErr"] = scrErr;
  exports["mkScreen"] = mkScreen;;
 
})(PS["Screen"] = PS["Screen"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Data_Lens_Setter = PS["Data.Lens.Setter"];
  var Data_Lens_Lens = PS["Data.Lens.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Int = PS["Data.Int"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_List = PS["Data.List"];
  var Data_String = PS["Data.String"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var TextBar = PS["TextBar"];
  var Input = PS["Input"];
  var Machine = PS["Machine"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];     
  var zeroButton = {
      pos: {
          x: 315.0, 
          y: 630.0
      }, 
      size: {
          x: 131.0, 
          y: 80.0
      }
  };
  var oneButton = {
      pos: {
          x: 497.0, 
          y: 627.0
      }, 
      size: {
          x: 134.0, 
          y: 82.0
      }
  };
  var updateMouseInput = function (i) {
      if (i.mouseClick instanceof Data_Maybe.Nothing) {
          return i;
      };
      if (i.mouseClick instanceof Data_Maybe.Just) {
          var _8 = CanvasUtils.pointInRect(i.mouseClick.value0)(zeroButton);
          if (_8) {
              return Data_Lens_Setter.set(function (_18) {
                  return Input.zeroOne(Data_Profunctor_Strong.strongFn)(Input.zero(Data_Profunctor_Strong.strongFn)(_18));
              })(true)(i);
          };
          if (!_8) {
              var _9 = CanvasUtils.pointInRect(i.mouseClick.value0)(oneButton);
              if (_9) {
                  return Data_Lens_Setter.set(function (_19) {
                      return Input.zeroOne(Data_Profunctor_Strong.strongFn)(Input.one(Data_Profunctor_Strong.strongFn)(_19));
                  })(true)(i);
              };
              if (!_9) {
                  return i;
              };
              throw new Error("Failed pattern match: " + [ _9.constructor.name ]);
          };
          throw new Error("Failed pattern match at SimScreen line 82, column 1 - line 94, column 1: " + [ _8.constructor.name ]);
      };
      throw new Error("Failed pattern match at SimScreen line 82, column 1 - line 94, column 1: " + [ i.mouseClick.constructor.name ]);
  };
  var mkSimScreen = function (img) {
      return {
          code: Data_List.Nil.value, 
          currLine: "", 
          gfx: img, 
          compRun: false, 
          inputs: Data_List.Nil.value, 
          outputs: Data_List.Nil.value, 
          machine: Data_Maybe.Nothing.value, 
          tests: Data_List.Nil.value
      };
  };                                                                                                                       
  var getPosition = function (i) {
      return {
          x: 350.0 + 100.0 * Data_Int.toNumber(Prelude.div(Prelude.moduloSemiringInt)(i)(8)), 
          y: 230.0 + 30.0 * Data_Int.toNumber(i % 8)
      };
  };
  var render = function (ctx) {
      return function (screen) {
          return function __do() {
              Graphics_Canvas.drawImage(ctx)(screen.gfx)(0.0)(0.0)();
              Graphics_Canvas.setFillStyle("#CC3388")(ctx)();
              Data_Traversable.sequence(Data_List.traversableList)(Control_Monad_Eff.applicativeEff)(Data_List.zipWith(function (p) {
                  return function (txt) {
                      return Graphics_Canvas.fillText(ctx)(txt)(p.x)(p.y);
                  };
              })(Prelude.map(Data_List.functorList)(getPosition)(Data_List.range(0)(40)))(Data_List.reverse(screen.code)))();
              Graphics_Canvas.setFillStyle("#DD4499")(ctx)();
              Graphics_Canvas.fillText(ctx)("> " + screen.currLine)(350.0)(230.0 + 30.0 * 8.0)();
              return Prelude.unit;
          };
      };
  };
  var done = function (_6) {
      return false;
  };
  var currLine = Data_Lens_Lens.lens(function (_0) {
      return _0.currLine;
  })(function (_1) {
      return function (_2) {
          var _11 = {};
          for (var _12 in _1) {
              if (_1.hasOwnProperty(_12)) {
                  _11[_12] = _1[_12];
              };
          };
          _11.currLine = _2;
          return _11;
      };
  });
  var code = Data_Lens_Lens.lens(function (_3) {
      return _3.code;
  })(function (_4) {
      return function (_5) {
          var _13 = {};
          for (var _14 in _4) {
              if (_4.hasOwnProperty(_14)) {
                  _13[_14] = _4[_14];
              };
          };
          _13.code = _5;
          return _13;
      };
  });
  var update = function (i) {
      return function (state) {
          var input = updateMouseInput(i);
          var line = state.currLine + (function () {
              if (input.zeroOne.zero) {
                  return "0";
              };
              if (!input.zeroOne.zero) {
                  return "" + (function () {
                      if (input.zeroOne.one) {
                          return "1";
                      };
                      if (!input.zeroOne.one) {
                          return "";
                      };
                      throw new Error("Failed pattern match: " + [ input.zeroOne.one.constructor.name ]);
                  })();
              };
              throw new Error("Failed pattern match at SimScreen line 94, column 1 - line 95, column 1: " + [ input.zeroOne.zero.constructor.name ]);
          })();
          var _17 = Data_String.length(line) >= 8;
          if (_17) {
              return Data_Lens_Setter.over(code(Data_Profunctor_Strong.strongFn))(Data_List.Cons.create(Data_String.take(8)(line)))(Data_Lens_Setter.set(currLine(Data_Profunctor_Strong.strongFn))(Data_String.drop(8)(line))(state));
          };
          if (!_17) {
              return Data_Lens_Setter.set(currLine(Data_Profunctor_Strong.strongFn))(line)(state);
          };
          throw new Error("Failed pattern match at SimScreen line 94, column 1 - line 95, column 1: " + [ _17.constructor.name ]);
      };
  };
  exports["code"] = code;
  exports["currLine"] = currLine;
  exports["getPosition"] = getPosition;
  exports["render"] = render;
  exports["update"] = update;
  exports["updateMouseInput"] = updateMouseInput;
  exports["oneButton"] = oneButton;
  exports["zeroButton"] = zeroButton;
  exports["done"] = done;
  exports["mkSimScreen"] = mkSimScreen;;
 
})(PS["SimScreen"] = PS["SimScreen"] || {});
(function(exports) {
  // Generated by psc version 0.7.6.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];
  var Utils = PS["Utils"];
  var CanvasUtils = PS["CanvasUtils"];
  var Zipper = PS["Zipper"];
  var Input = PS["Input"];
  var Screen = PS["Screen"];
  var SimScreen = PS["SimScreen"];     
  var VNScreen = (function () {
      function VNScreen(value0) {
          this.value0 = value0;
      };
      VNScreen.create = function (value0) {
          return new VNScreen(value0);
      };
      return VNScreen;
  })();
  var Simulation = (function () {
      function Simulation(value0) {
          this.value0 = value0;
      };
      Simulation.create = function (value0) {
          return new Simulation(value0);
      };
      return Simulation;
  })();
  var Wait = (function () {
      function Wait(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Wait.create = function (value0) {
          return function (value1) {
              return new Wait(value0, value1);
          };
      };
      return Wait;
  })();
  var Screens = (function () {
      function Screens(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Screens.create = function (value0) {
          return function (value1) {
              return new Screens(value0, value1);
          };
      };
      return Screens;
  })();
  var renderScreens = function (__copy_ctx) {
      return function (__copy__7) {
          var ctx = __copy_ctx;
          var _7 = __copy__7;
          tco: while (true) {
              var ctx_1 = ctx;
              if (_7 instanceof Simulation) {
                  return SimScreen.render(ctx_1)(_7.value0);
              };
              var ctx_1 = ctx;
              if (_7 instanceof VNScreen) {
                  return Screen.renderScreen(ctx_1)(Zipper.current(_7.value0));
              };
              var ctx_1 = ctx;
              if (_7 instanceof Wait) {
                  var __tco__7 = _7.value1;
                  ctx = ctx_1;
                  _7 = __tco__7;
                  continue tco;
              };
              if (_7 instanceof Screens) {
                  var __tco_ctx = ctx;
                  var __tco__7 = _7.value0;
                  ctx = __tco_ctx;
                  _7 = __tco__7;
                  continue tco;
              };
              throw new Error("Failed pattern match: " + [ ctx.constructor.name, _7.constructor.name ]);
          };
      };
  };
  var initialState = Prelude.bind(Control_Monad_Aff.bindAff)(CanvasUtils.loadImageData("assets/comp2.png"))(function (_4) {
      return Prelude.pure(Control_Monad_Aff.applicativeAff)(new Screens(VNScreen.create(Screen.screens(_4)(Screen.intro)), Simulation.create(SimScreen.mkSimScreen(_4))));
  });
  var finished = function (__copy__5) {
      var _5 = __copy__5;
      tco: while (true) {
          if (_5 instanceof VNScreen) {
              return !Utils.fst(Zipper.next(_5.value0));
          };
          if (_5 instanceof Wait) {
              return false;
          };
          if (_5 instanceof Simulation) {
              return SimScreen.done(_5.value0);
          };
          if (_5 instanceof Screens) {
              var __tco__5 = _5.value0;
              _5 = __tco__5;
              continue tco;
          };
          throw new Error("Failed pattern match: " + [ _5.constructor.name ]);
      };
  };
  var update = function (input) {
      return function (_6) {
          if (_6 instanceof Screens) {
              var _26 = input.screenDir > 0.0 && finished(_6.value0);
              if (_26) {
                  return new Wait(input.time, _6.value1);
              };
              if (!_26) {
                  return new Screens(update(input)(_6.value0), _6.value1);
              };
              throw new Error("Failed pattern match: " + [ _26.constructor.name ]);
          };
          if (_6 instanceof Wait) {
              var _29 = _6.value0 + Signal_Time.second / 4.0 <= input.time;
              if (_29) {
                  return _6.value1;
              };
              if (!_29) {
                  return _6;
              };
              throw new Error("Failed pattern match: " + [ _29.constructor.name ]);
          };
          if (_6 instanceof Simulation) {
              return Simulation.create(SimScreen.update(input)(_6.value0));
          };
          if (_6 instanceof VNScreen) {
              var _33 = input.screenDir > 0.0;
              if (_33) {
                  return VNScreen.create(Utils.snd(Zipper.next(_6.value0)));
              };
              if (!_33) {
                  var _34 = input.screenDir < 0.0;
                  if (_34) {
                      return VNScreen.create(Utils.snd(Zipper.back(_6.value0)));
                  };
                  if (!_34) {
                      return _6;
                  };
                  throw new Error("Failed pattern match: " + [ _34.constructor.name ]);
              };
              throw new Error("Failed pattern match: " + [ _33.constructor.name ]);
          };
          throw new Error("Failed pattern match: " + [ input.constructor.name, _6.constructor.name ]);
      };
  };
  var clearCanvas = function (ctx) {
      return function __do() {
          Graphics_Canvas.setFillStyle("#1B1C1B")(ctx)();
          return Graphics_Canvas.fillRect(ctx)({
              x: 0.0, 
              y: 0.0, 
              w: 1024.0, 
              h: 800.0
          })();
      };
  };
  var render = function (context) {
      return function (state) {
          return function __do() {
              clearCanvas(context)();
              renderScreens(context)(state)();
              return Prelude.unit;
          };
      };
  };
  var main = function __do() {
      var _3 = Graphics_Canvas.getCanvasElementById("canvas")();
      if (_3 instanceof Data_Maybe.Just) {
          var _2 = Graphics_Canvas.getContext2D(_3.value0)();
          var _1 = Input.input();
          return Control_Monad_Aff.launchAff(Prelude.bind(Control_Monad_Aff.bindAff)(initialState)(function (_0) {
              var game = Signal.foldp(update)(_0)(_1);
              return Control_Monad_Aff["liftEff'"](Signal.runSignal(Prelude["<$>"](Signal.functorSignal)(render(_2))(game)));
          }))();
      };
      throw new Error("Failed pattern match at Main line 20, column 1 - line 33, column 1: " + [ _3.constructor.name ]);
  };
  exports["VNScreen"] = VNScreen;
  exports["Simulation"] = Simulation;
  exports["Wait"] = Wait;
  exports["Screens"] = Screens;
  exports["clearCanvas"] = clearCanvas;
  exports["render"] = render;
  exports["renderScreens"] = renderScreens;
  exports["update"] = update;
  exports["initialState"] = initialState;
  exports["finished"] = finished;
  exports["main"] = main;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();

}).call(this,require('_process'))
},{"_process":2}],2:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1]);
